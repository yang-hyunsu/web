실습과제
[1단계:개념]1. jquery ajax의 속성에 대하여 기술하세요.
[1단계:코드]2. 화면에서 가격, 할인율을 입력하는 순간, 서버에서 전달해서 서버에서 최종 가격을 전달해서 받아오게 출력하세요.
   (controller[가격계산], 화면jsp 구현)
[1단계:코드]3. 급여등급을 선택시, 최소와 최대을 출력되게 하세요.
[1단계:코드]4. 사원번호를 입력해서 enter키 시, dao에 사원정보를 출력되게 하세요(없으면 해당사원없음 표시)


<%--
[1단계:개념]1. jquery ajax의 속성에 대하여 기술하세요.

   url : 서버의주소
   data : 요청(물건명 가격 갯수)
   type : post/get         
   dataType : json/text/html
   success:function(data){}
   error:function(){}
   
[1단계:코드]2. 화면에서 가격, 할인율을 입력하는 순간, 서버에서 전달해서 서버에서 최종 가격을 전달해서 받아오게 출력하세요.
   (controller[가격계산], 화면jsp 구현)
   --servlet---
   
   request.setCharacterEncoding("utf-8");
      
      String priceS= request.getParameter("price");
      int price=0;
      if(priceS!=null && !priceS.equals(""))price =Integer.parseInt(priceS);
      String saleS= request.getParameter("sale");
      int sale=0;
      if(saleS!=null)sale=Integer.parseInt(saleS);
      int tot = price-(price*sale/100.0);
      // 정수/정수 ==> 정수
      // 정수/실수 ==> 실수
      //  50/100  ==> 0
      //  50/100.0 ==> 0.5
      
      response.setCharacterEncoding("utf-8");
      response.setContentType("text/plain;utf-8");
      response.getWriter().print("가격:"+price+"\n 할인율:"+sale+"%\n 총계:"+tot);
      
      Cal c =new Cal(price,sale);
      Gson g =new Gson();
      response.getWriter().print(g.toJson(c));
      
--------------------------------------------------------
$(document).ready( function(){
          
          $("#regBtn").click(function(){
             var priceVal =$("#price").val()
             
             $.ajax({
                url:"${path}/cal.do",
                data:$("#frm").serialize(), // controller에 요청값을 전송
                type:"post",
                dataType:"text",
                success:function(data){
                   alert(data)
                },
                error:function(err){
                   console.log("#에러 발생#")
                   console.log(err)
                }   
                
             })
          })
          
       });
   <div class="container mt-3">
       <h2>계산</h2>
        <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
           <div class="container-fluid">       
          <form id="frm" method="post"  class="d-flex align-items-center" >
               <input type="text" class="form-control me-2" 
                 id="price" placeholder="가격 입력" value="${param.title}" 
                 name="price"  aria-label="Search">
               <input type="text" class="form-control me-2" 
                 id="sale" placeholder="할인율 입력" value="${param.title}" 
                 name="sale"  aria-label="Search">                 
               <button type="button" id="regBtn" class="btn btn-primary" style="width:200px;">계산</button>
           </form>
           </div>
       </nav>
      <table class="table table-striped table-hover">
         <thead class="table-success">
               <tr  class="text-center">
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Email</th>
               </tr>
          </thead>
          <tbody>
               <tr  class="text-center">
                 <td>John</td>
                 <td>Doe</td>
                 <td>john@example.com</td>
               </tr>
          </tbody>
      </table>         
    </div>
   
   
   
[1단계:코드]3. 급여등급을 선택시, 최소와 최대을 출력되게 하세요.
dao 처리
select *
from salgrade
where grade = ?
servlet
String grade = request.getParameter("grade")
if(grade==null) grade = "";

Grade d = dao.getGrade(grade)

response.getWriter().print(g.toJson(d))


[1단계:코드]4. 사원번호를 입력해서 enter키 시, dao에 사원정보를 출력되게 하세요(없으면 해당사원없음 표시)
String empnoS=request.getParameter("empno");
      int empno=0;
      if(empnoS!=null&&!empnoS.equals(""))
         empno=Integer.parseInt(empnoS);
      
            
      A04_PreparedDao dao =new A04_PreparedDao();
      Emp e = dao.getEmp(empno);
      Gson g = new Gson();
      response.setCharacterEncoding("utf-8");
      response.setContentType("text/plain;utf-8");
      response.getWriter().print(g.toJson(e));
      
   }
-----------------------------
$(document).ready( function(){
          
          $("#empno").keyup(function(){
             // 백앤드/backWeb/dept.do?deptno=10
             // 1. url:"${path}/dept.do".
             // 2. data : "deptno="+$("#deptno").val(),요청값
             // 3. success:function(dept){ 받는객체
             if(event.keyCode==13){
                $.ajax({
                   url:"${path}/emp2.do",
                   type:"post",
                   data:"empno="+$("#empno").val(),
                   dataType:"json",// json문자열 ==> 객체로 바꿔준다.
                   success:function(emp){
                      console.log(emp)
                      var add ="<td>"+emp.empno+"</td>"
                         add +="<td>"+emp.ename+"</td>"
                         add +="<td>"+emp.job+"</td>"
                         add +="<td>"+emp.mgr+"</td>"
                         add +="<td>"+emp.hiredateS+"</td>"
                         add +="<td>"+emp.sal+"</td>"
                         add +="<td>"+emp.comm+"</td>"
                         add +="<td>"+emp.deptno+"</td>"
                         $("#empInfo").html(add)
                   },
                   error:function(err){
                      console.log(err)
                   }                   
                   
                })
                
             }
          })

<div class="container mt-3">
       <h2>사원정보 검색</h2>
        <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
           <div class="container-fluid">       
               <input type="text" class="form-control me-2" 
                 id="empno"  placeholder="사원번호 입력" value="${param.title}" name="empno"  aria-label="Search">
           </div>
       </nav>
      <table class="table table-striped table-hover">
         <thead class="table-success">
               <tr  class="text-center">
                <th>사원번호</th>
                <th>사원명</th>
                <th>직책</th>
                <th>관리자번호</th>
                <th>마감일</th>
                <th>급여</th>
                <th>보너스</th>
                <th>부서번호</th>
                <th></th>
               </tr>
          </thead>
          <tbody>
               <tr id="empInfo" class="text-center">
                 <td>John</td>
                 <td>Doe</td>
                 <td>john@example.com</td>
                 <td>john@example.com</td>
                 <td>john@example.com</td>
                 <td>john@example.com</td>
                 <td>john@example.com</td>
                 <td>john@example.com</td>
               </tr>
          </tbody>
      </table>         
    </div>

 --%>


[1단계:개념] 1. jQuery Ajax의 속성에 대하여 기술

jQuery Ajax는 웹 애플리케이션에서 비동기적으로 서버와 데이터를 교환하기 위해 사용되는 기술입니다. Ajax 요청을 보낼 때 다양한 속성을 설정할 수 있습니다. 몇 가지 중요한 속성은 다음과 같습니다:

- url: Ajax 요청이 전송될 서버의 URL을 지정합니다.
- type: 요청의 HTTP 메서드를 지정합니다. 예를 들어, "GET", "POST", "PUT", "DELETE" 등이 있습니다.
- data: 서버로 보낼 데이터를 지정합니다. 이는 쿼리 문자열 형식이나 JavaScript 객체로 전달할 수 있습니다.
- dataType: 서버로부터 받아온 데이터의 예상되는 타입을 지정합니다. 예를 들어, "json", "xml", "html" 등이 있습니다.
- success: Ajax 요청이 성공적으로 완료되었을 때 실행될 콜백 함수를 지정합니다.
- error: Ajax 요청이 실패했을 때 실행될 콜백 함수를 지정합니다.

이 외에도 많은 속성들이 존재하며, 필요에 따라 Ajax 요청에 적합한 속성을 선택하여 사용할 수 있습니다.

[1단계:코드] 2. 화면에서 가격, 할인율을 입력하는 순간, 서버에서 전달해서 서버에서 최종 가격을 전달해서 받아오게 출력

아래는 해당 기능을 구현하는 예시 코드입니다. 가격과 할인율을 입력받는 화면(JSP)과 해당 정보를 처리하는 컨트롤러(Controller)를 포함합니다.

```jsp
<!-- price.jsp -->
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <input type="number" id="price" placeholder="가격 입력">
    <input type="number" id="discount" placeholder="할인율 입력">
    <div id="result"></div>

    <script>
        $(document).ready(function() {
            $("#price, #discount").on("input", function() {
                var price = $("#price").val();
                var discount = $("#discount").val();
                var url = "calculatePrice"; // 컨트롤러의 URL

                $.ajax({
                    url: url,
                    type: "POST",
                    data: {
                        price: price,
                        discount: discount
                    },
                    success: function(data) {
                        $("#result").text("최종 가격: " + data);
                    },
                    error: function() {
                        $("#result").text("가격 계산 실패");
                    }
                });
            });
        });
    </script>
</body>
</html>
```

```java
// PriceController.java
@Controller
public class PriceController {
    @PostMapping("/calculatePrice")
    @ResponseBody
    public String calculatePrice(@RequestParam int price, @RequestParam int discount)

{
        int finalPrice = price - (price * discount / 100);
        return String.valueOf(finalPrice);
    }
}
```

위 코드에서는 입력 필드의 값이 변경될 때마다 `input` 이벤트가 발생하여 Ajax 요청이 서버로 전송됩니다. 컨트롤러는 `calculatePrice` URL에 대한 POST 요청을 처리하며, 가격과 할인율을 받아 최종 가격을 계산하여 문자열로 반환합니다. 반환된 데이터는 성공적인 응답일 경우 결과 창에 출력되고, 오류가 발생한 경우 오류 메시지가 출력됩니다.

[1단계:코드] 3. 급여 등급을 선택할 때 최소와 최대 값을 출력

아래는 해당 기능을 구현하는 예시 코드입니다.

```html
<!-- salary.jsp -->
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <select id="salaryGrade">
        <option value="1">1급</option>
        <option value="2">2급</option>
        <option value="3">3급</option>
    </select>
    <div id="salaryRange"></div>
    <script>
        $(document).ready(function() {
            $("#salaryGrade").change(function() {
                var grade = $(this).val();
                var url = "getSalaryRange.do"; // 컨트롤러의 URL
                $.ajax({
                    url: url,
                    type: "GET",
                    data: {
                        grade: grade
                    },
                    success: function(data) {
                        $("#salaryRange").text("최소: " + data.min + ", 최대: " + data.max);
                    },
                    error: function() {
                        $("#salaryRange").text("급여 등급 조회 실패");
                    }
                });
            });
        });
    </script>
</body>
</html>
```

```java
// SalaryController.java
@Controller
public class SalaryController {
    @GetMapping("/getSalaryRange")
    @ResponseBody
    public Map<String, Integer> getSalaryRange(@RequestParam int grade) {
        Map<String, Integer> salaryRange = new HashMap<>();
        
        // 급여 등급에 따른 최소와 최대 값을 계산하여 반환
        switch (grade) {
            case 1:
                salaryRange.put("min", 1000000);
                salaryRange.put("max", 2000000);
                break;
            case 2:
                salaryRange.put("min", 2000000);
                salaryRange.put("max", 3000000);
                break;
            case 3:
                salaryRange.put("min", 3000000);
                salaryRange.put("max", 4000000);
                break;
            // 추가적인 급여 등급에 따른 값을 설정
        }
        
        return salaryRange;
    }
}
```

위 코드에서는 급여 등급 선택 시 `change` 이벤트가 발생하여 Ajax 요청이 서버로 전송됩니다. 컨트롤러는 `getSalaryRange` URL에 대한 GET 요청을 처리하며, 선택된 등급에 따라 최소와 최대 값을 계산

하여 JSON 형식으로 반환합니다. 반환된 데이터는 성공적인 응답일 경우 결과 창에 출력되고, 오류가 발생한 경우 오류 메시지가 출력됩니다.

[1단계:코드] 4. 사원번호를 입력하고 Enter 키를 누를 때 DAO에서 사원 정보를 출력하거나 해당 사원이 없으면 "해당 사원 없음"을 표시

아래는 해당 기능을 구현하는 예시 코드입니다.

```html
<!-- employee.jsp -->
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <input type="text" id="employeeId" placeholder="사원 번호 입력">
    <div id="employeeInfo"></div>

    <script>
        $(document).ready(function() {
            $("#employeeId").keyup(function(event) {
                if (event.keyCode === 13) {
                    var employeeId = $(this).val();
                    var url = "getEmployeeInfo"; // 컨트롤러의 URL

                    $.ajax({
                        url: url,
                        type: "GET",
                        data: {
                            employeeId: employeeId
                        },
                        success: function(data) {
                            if (data) {
                                $("#employeeInfo").text(data);
                            } else {
                                $("#employeeInfo").text("해당 사원 없음");
                            }
                        },
                        error: function() {
                            $("#employeeInfo").text("사원 정보 조회 실패");
                        }
                    });
                }
            });
        });
    </script>
</body>
</html>
```

```java
// EmployeeController.java
@Controller
public class EmployeeController {
    @GetMapping("/getEmployeeInfo")
    @ResponseBody
    public String getEmployeeInfo(@RequestParam String employeeId) {
        // DAO에서 사원 정보를 조회하고 반환
        String employeeInfo = EmployeeDAO.getEmployeeInfo(employeeId);
        return employeeInfo;
    }
}
```

위 코드에서는 입력 필드에서 Enter 키(`keyCode === 13`)를 누르면 `keyup` 이벤트가 발생하여 Ajax 요청이 서버로 전송됩니다. 컨트롤러는 `getEmployeeInfo` URL에 대한 GET 요청을 처리하며, 사원 번호에 해당하는 사원 정보를 DAO에서 조회하여 반환합니다. 반환된 데이터는 성공적인 응답일 경우 결과 창에 출력되고, 해당 사원이 없는 경우 "해당 사원 없음"이 출력됩니다.

