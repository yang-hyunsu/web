# 조별 토론 및 실습과제
[1단계:개념확인] 1. 조별로 el 태그를 활용한 session scope범위와 실제 코드에 대하여 알고 있는지 확인
            ajax를 처리하기 위해 필요한 기본 형식과 기본 데이터와 json데이터 가져오는 처리형식을 아는지 확인
[1단계:코드] 2. el 태그를 이용하여 4가지 session scope의 범위를 기본 변수로 설정하여 호출해보자.
[1단계:코드] 3. el을 이용하여 클래스 Person을 객체로 session scope로 설정하고 호출해 보자.
[1단계:코드] 4. el을 이용하여 form으로 물품명과 가격과 갯수을 입력해서 해당 내용을 출력처리하자.
[1단계:코드] 5. ajax처리 순서를 기술하고, 서버에 선언된 데이터(하나데이터,배열데이터, json 데이터)를 동기적으로 가져오는 처리를 하여 화면에 할당하세요


[1단계:개념확인]
1. EL(표현 언어) 태그를 활용한 session scope 범위와 실제 코드에 대해 알고 있는지 확인합니다.
2. AJAX를 처리하기 위한 기본 형식과 기본 데이터, JSON 데이터를 가져오는 처리 형식에 대해 알고 있는지 확인합니다.

[1단계:코드]
2. EL 태그를 이용하여 4가지 session scope 범위를 기본 변수로 설정하고 호출해 봅시다.
```


```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
    <title>EL Tag Session Scope</title>
</head>
<body>
    <h1>EL Tag Session Scope</h1>
    
    <%-- 세션에 데이터 설정 --%>
    <%
    
        session.setAttribute("name", "홍길동");
        session.setAttribute("age", 30);
        session.setAttribute("gender", "남자");
        session.setAttribute("job", "개발자");
    %>
    
    <%-- EL 태그를 이용하여 세션 데이터 호출 --%>
    <h2>Name: ${name}</h2>
    <h2>Age: ${sessionScope.age}</h2>
    <h2>Gender: ${sessionScope.gender}</h2>
    <h2>Job: ${sessionScope.job}</h2>
</body>
</html>
```

3. EL을 이용하여 클래스 Person을 객체로 session scope로 설정하고 호출해 봅시다.

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
    <title>EL Tag Session Scope - Object</title>
</head>
<body>
    <h1>EL Tag Session Scope - Object</h1>
    
    <%-- Person 클래스 정의 --%>
    <%!
        public class Person {
            private String name;
            private int age;
            
            public Person(String name, int age) {
                this.name = name;
                this.age = age;
            }
            
            public String getName() {
                return name;
            }
            
            public int getAge() {
                return age;
            }
        }
    %>
    
    <%-- Person 객체를 session scope로 설정 --%>
    <%
        Person person = new Person("홍길동", 30);
        session.setAttribute("person", person);
    %>
    
    <%-- EL 태그를 이용하여 세션 객체 호출 --%>
    <h2>Name: ${sessionScope.person.name}</h2>
    <h2>Age: ${sessionScope.person.age}</h2>
</body>
</html>
```

4. EL을 이용하여 form으로 물품명, 가격, 갯수를 입력하고 해당 내용을 출력 처리해 봅시다.

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib prefix="

c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
    <title>EL Tag Form Example</title>
</head>
<body>
    <h1>EL Tag Form Example</h1>
    
    <%-- form으로 물품명, 가격, 갯수 입력 --%>
    <form action="" method="post">
        <label for="itemName">물품명:</label>
        <input type="text" id="itemName" name="itemName">
        <br>
        <label for="price">가격:</label>
        <input type="number" id="price" name="price">
        <br>
        <label for="quantity">갯수:</label>
        <input type="number" id="quantity" name="quantity">
        <br>
        <button type="submit">전송</button>
    </form>
    
    <%-- EL 태그를 이용하여 입력된 내용 출력 --%>
    <h2>물품명: ${param.itemName}</h2>
    <h2>가격: ${param.price}</h2>
    <h2>갯수: ${param.quantity}</h2>
</body>
</html>
```

5. AJAX 처리 순서를 기술하고, 서버에 선언된 데이터(하나의 데이터, 배열 데이터, JSON 데이터)를 동기적으로 가져오는 처리를 하여 화면에 할당해 보세요.

AJAX 처리 순서:
1. JavaScript를 사용하여 AJAX 요청을 생성합니다.
2. 요청에 필요한 데이터와 요청 URL을 설정합니다.
3. 서버로 요청을 전송합니다.
4. 서버는 요청을 처리하고 결과 데이터를 생성합니다.
5. 클라이언트는 서버로부터 받은 결과 데이터를 처리하고 화면에 할당합니다.

예제 코드:

```html
<!DOCTYPE html>
<html>
<head>
    <title>AJAX Example</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
</head>
<body>
    <h1>AJAX Example</h1>
    
    <button id="btnSingleData">하나의 데이터 가져오기</button>
    <button id="btnArrayData">배열 데이터 가져오기</button>
    <button id="btnJsonData">JSON 데이터 가져오기</button>
    
    <div id="result"></div>
    
    <script>
    	// jquery 선언
        $(document).ready(function() {
            $("#btnSingleData").click(function() {
                $.ajax({
                    url: "getData.jsp",
                    method: "GET",
                    dataType: "text",
                    success: function(data) {
                        $("#result").text(data);
                    }
                });
            });
            
            $("#btnArrayData").click(function() {
                $.ajax({
                    url: "getArrayData.jsp",
                    method: "GET",
                    dataType: "json",
                    success: function(data) {
                        var result = "";
                        for (var i = 0; i < data.length; i++) {
                            result += data[i] + "<br>";
                        }
                        $("#result").html(result);
                    }
                });
            });
            
            $("#btnJsonData").click(function() {
                $.ajax({
                    url: "getJsonData.jsp",
                    method: "GET",


                    dataType: "json",
                    success: function(data) {
                        var result = "";
                        result += "이름: " + data.name + "<br>";
                        result += "나이: " + data.age + "<br>";
                        result += "성별: " + data.gender + "<br>";
                        $("#result").html(result);
                    }
                });
            });
        });
    </script>
</body>
</html>
```
위의 코드에서 `getData.jsp`, `getArrayData.jsp`, `getJsonData.jsp`는 각각 서버에서 데이터를 가져오는 JSP 파일입니다. 각 JSP 파일은 해당하는 데이터를 생성하여 반환해야 합니다.