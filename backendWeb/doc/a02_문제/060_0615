[1단계:개념] 1. 테이블 구조변경의 종류를 기본 코드로 리스트하세요
[1단계:코드] 2. emp14 (사원명과 부서명, 급여)테이블을 만들고, 직책명 컬럼을 추가하되 default로 '직책없음', 
                제약사항으로 사원정보의 직책범위를 distinct로 확인하여 check 설정하여 만드세요.
[1단계:코드] 3. 주문번호   고객명   주문일자           상품명
      1   홍길동   2022-01-01   노트북
      2   이영희   2022-02-15   마우스
      3   김철수   2022-01-01   키보드, 마우스   
      4   박지성   2022-03-10   스마트폰
      5   이영희   2022-03-10   노트북, 핸드폰
      6   홍길동   2022-03-10   키보드
      이 내용을 제1정규화를 처리한 테이블 구조를 만드세요.
[1단계:코드] 4. 깁밥의 가격과 갯수를 3종류를 요청값으로 받아서 해당 내용의 계산 결과를 테이블에 총비용과 함께 출력하세요.


[1단계:개념]
1. 테이블 구조변경의 종류:
   a) 컬럼 추가 (ALTER TABLE 테이블명 ADD 컬럼명 데이터타입)
   b) 컬럼 삭제 (ALTER TABLE 테이블명 DROP COLUMN 컬럼명)
   c) 컬럼 변경 (ALTER TABLE 테이블명 MODIFY 컬럼명 새로운_데이터타입)
   d) 제약 조건 추가 (ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 제약조건)
   e) 제약 조건 삭제 (ALTER TABLE 테이블명 DROP CONSTRAINT 제약조건명)
   f) 테이블 이름 변경 (ALTER TABLE 이전_테이블명 RENAME TO 새로운_테이블명)

[1단계:코드]
2. emp14 테이블 구조 변경 및 제약 조건 추가:

```sql
CREATE TABLE emp14 (
  ename VARCHAR2(50),
  dname VARCHAR2(50),
  sal NUMBER,
  job VARCHAR2(50) DEFAULT '직책없음',
  CONSTRAINT check_직책명 CHECK 
  	(job IN (SELECT DISTINCT job FROM emp14))
);

```

3. 주어진 데이터를 제1정규화를 처리한 테이블 구조:

사원 테이블 (사원번호, 사원명, 급여)

| 사원번호 | 사원명 | 급여   |
| -------- | ------ | ------ |
| 1        | 홍길동 | NULL   |
| 2        | 이영희 | NULL   |
| 3        | 김철수 | NULL   |
| 4        | 박지성 | NULL   |

주문 테이블 (주문번호, 사원번호, 주문일자)

| 주문번호 | 사원번호 | 주문일자   |
| -------- | -------- | ---------- |
| 1        | 1        | 2022-01-01 |
| 2        | 2        | 2022-02-15 |
| 3        | 3        | 2022-01-01 |
| 4        | 4        | 2022-03-10 |
| 5        | 2        | 2022-03-10 |
| 6        | 1        | 2022-03-10 |

상품 테이블 (상품번호, 상품명)

| 상품번호 | 상품명     |
| -------- | ---------- |
| 1        | 노트북     |
| 2        | 마우스     |
| 3        | 키보드     |
| 4        | 스마트폰   |
| 5        | 핸드폰     |

주문상품 테이블 (주문번호, 상품번호)

| 주문번호 | 상품번호 |
| -------- | -------- |
| 1        | 1        |
| 2        | 3        |
| 3        | 2        |
| 3        | 3        |
| 4        | 4        |
| 5        | 1        |
| 5        | 5        |
| 6        | 3        |

[1단계:코드] 4. 깁밥의 가격과 갯수를 3종류를 요청값으로 받아서 해당 내용의 계산 결과를 테이블에 총비용과 함께 출력하세요.
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>깁밥 가격 계산</title>
</head>
<body>
    <h1>깁밥 가격 계산 결과</h1>
    
    <table>
        <tr>
            <th>깁밥 종류</th>
            <th>가격</th>
            <th>갯수</th>
            <th>소계</th>
        </tr>
        <%!
            // 깁밥 가격 설정
            int gimbapPrice1 = 1000;
            int gimbapPrice2 = 1500;
            int gimbapPrice3 = 2000;
        %>
        
        <% 
            // 요청값 받아오기
            String[] quantities = request.getParameterValues("quantity");
            
            // 소계 계산 및 출력
            if (quantities != null) {
                for (int i = 0; i < quantities.length; i++) {
                    int quantity = Integer.parseInt(quantities[i]);
                    int subtotal;
                    
                    switch (i) {
                        case 0:
                            subtotal = quantity * gimbapPrice1;
                            %><tr><td>김치깁밥</td><td><%= gimbapPrice1 %></td><td><%= quantity %></td><td><%= subtotal %></td></tr><%
                            break;
                        case 1:
                            subtotal = quantity * gimbapPrice2;
                            %><tr><td>참치깁밥</td><td><%= gimbapPrice2 %></td><td><%= quantity %></td><td><%= subtotal %></td></tr><%
                            break;
                        case 2:
                            subtotal = quantity * gimbapPrice3;
                            %><tr><td>소고기깁밥</td><td><%= gimbapPrice3 %></td><td><%= quantity %></td><td><%= subtotal %></td></tr><%
                            break;
                    }
                }
            }
        %>
    </table>
    
    <% 
        // 총비용 계산
        int totalCost = 0;
        
        if (quantities != null) {
            for (int i = 0; i < quantities.length; i++) {
                int quantity = Integer.parseInt(quantities[i]);
                
                switch (i) {
                    case 0:
                        totalCost += quantity * gimbapPrice1;
                        break;
                    case 1:
                        totalCost += quantity * gimbapPrice2;
                        break;
                    case 2:
                        totalCost += quantity * gimbapPrice3;
                        break;
                }
            }
        }
    %>
    
    <h3>총비용: <%= totalCost %>원</h3>
    
</body>
</html>


