1. JSP에서 액션태그를 사용하면 효율적으로 프로그램을 처리할 수 있는데, 이 중 내장된 액션태그의 형식은 무엇인가요?
    1. <%@ tag %>
    2. <jsp:tag>
    3. <action:tag>
    4. <script:tag>

2. <jsp:include> 액션태그는 어떤 상황에 사용되나요?
    1. 페이지 모듈화를 처리할 때
    2. 요청 흐름을 처리할 때
    3. 객체를 생성하거나 요청값을 전달할 때
    4. 다른 JSP 페이지의 실행 결과를 현재 위치에 삽입할 때

3. <jsp:include>의 "page" 속성의 역할은 무엇인가요?
    1. 버퍼를 플러시 할 지 결정
    2. 포함될 외부 jsp 페이지를 지정
    3. 객체를 생성하고 요청값을 전달
    4. 데이터를 해당 페이지에 전달

4. <jsp:include>의 "flush" 속성의 역할은 무엇인가요?
    1. 포함될 외부 jsp 페이지를 지정
    2. 버퍼를 플러시 할 지 결정
    3. 데이터를 해당 페이지에 전달
    4. 객체를 생성하고 요청값을 전달

5. 버퍼 개념이란 무엇인가요?
    1. 데이터가 특정 패킷(데이터 단위)에 도달할 때까지 표현되는 것
    2. 네트워크 속도가 좋지 않을 때, 현재 화면을 조금씩 로딩하는 것
    3. 버퍼 메모리를 사용하여 한꺼번에 화면을 구성하는 개념
    4. 화면을 구성하는데 어느 정도 데이터가 있는 패킷(데이터단위)가 있어야 표현이 되는 것

6. <jsp:forward> 액션태그는 어떤 상황에 사용되나요?
    1. 페이지 모듈화를 처리할 때
    2. 요청 흐름을 처리할 때
    3. 객체를 생성하거나 요청값을 전달할 때
    4. 다른 JSP 페이지의 실행 결과를 현재 위치에 삽입할 때

7. <jsp:param> 액션태그는 어디에 사용되나요?
    1. <jsp:forward> 태그의 하위 태그
    2. <jsp:include> 태그의 하위 태그
    3. <jsp:useBean> 태그의 하위 태그
    4. <jsp:getProperty> 태그의 하위 태그
    
8. 제 2정규화의 주요 목표는 무엇인가요?
    1. 중복된 데이터를 최소화하고, 데이터의 무결성을 보장하기 위해 비-키(non-key) 속성 간의 종속성을 제거하는 것
    2. 모든 속성이 기본키에 완전 함수 종속적인 것을 보장하기 위해
    3. 다치 종속성을 제거하는 것
    4. 모든 속성이 기본키에 부분적으로 종속적인 것을 보장하기 위해

#9. 제 2정규화를 통해 얻을 수 있는 이점 중 틀린 것은 무엇인가요?
    1. 데이터의 중복을 최소화하며, 더 효율적인 데이터 저장을 가능하게 한다.
    2. 데이터의 무결성을 보장하고 데이터의 변경, 삭제, 추가에 따른 오류를 최소화한다.
    3. 다치 종속성을 해결한다.
    4. 비-키(non-key) 속성 간의 종속성을 제거하고, 각 테이블이 단일 목적을 갖도록 설계한다.

10. 다음 중 제 2정규화를 위반하는 예는 무엇인가요?
    1. 학생테이블에서 학번이 기본키이고, 이름과 전공이 각각 학번에 완전 함수 종속적인 경우
    2. 주문테이블에서 주문번호와 상품번호가 복합키이며, 주문일자와 주문수량이 복합키에 완전 함수 종속적인 경우
    3. 구매테이블에서 고객번호와 제품번호가 복합키이고, 고객명이 고객번호에만 부분적으로 종속적인 경우
    4. 의사테이블에서 의사번호가 기본키이고, 이름과 전문분야가 각각 의사번호에 완전 함수 종속적인 경우

11. START WITH 절의 역할은 무엇인가요?
    1. SQL 쿼리를 시작하는 위치를 지정합니다.
    2. 계층 쿼리에서 최상위 노드를 지정합니다.
    3. 테이블을 시작하는 시점을 지정합니다.
    4. 데이터를 불러올 시작점을 설정합니다.

12. CONNECT BY 절의 기능은 무엇인가요?
    1. 계층 구조에서 부모 노드와 자식 노드의 관계를 정의합니다.
    2. 서로 다른 테이블을 연결하는데 사용합니다.
    3. 데이터베이스 연결을 설정하는데 사용합니다.
    4. 각 행간의 연결을 지정합니다.

13. 계층 쿼리에서 순서를 조정하기 위해 사용하는 절은 무엇인가요?
    1. ORDER BY
    2. GROUP BY
    3. ORDER SIBLINGS BY
    4. CONNECT BY

14. PRIOR 키워드의 기능은 무엇인가요?
    1. 이전 행의 데이터를 참조합니다.
    2. 계층적 쿼리에서 부모 노드를 참조합니다.
    3. 우선순위를 정하는데 사용합니다.
    4. 특정 컬럼의 이전 값을 참조합니다.

15. Oracle의 계층 쿼리에서 사용되는 LEVEL 키워드의 기능은 무엇인가요?
    1. 현재 노드의 계층 수준을 반환합니다.
    2. 데이터베이스의 레벨을 설정합니다.
    3. 특정 컬럼의 값 레벨을 결정합니다.
    4. 계층 구조의 깊이를 제한합니다.




# 해설
1. JSP에서 액션태그를 사용하면 효율적으로 프로그램을 처리할 수 있는데, 이 중 내장된 액션태그의 형식은 무엇인가요?
    1. <%@ tag %>
    2. <jsp:tag>
    3. <action:tag>
    4. <script:tag>
정답: 2. jsp:tag
해설: JSP에서 액션태그는 jsp:tag 형식으로 사용됩니다. 이런 형식의 태그는 JSP 페이지 내에서 미리 정의된 기능을 수행합니다.
2. <jsp:include> 액션태그는 어떤 상황에 사용되나요?
    1. 페이지 모듈화를 처리할 때
    2. 요청 흐름을 처리할 때
    3. 객체를 생성하거나 요청값을 전달할 때
    4. 다른 JSP 페이지의 실행 결과를 현재 위치에 삽입할 때
정답: 4. 다른 JSP 페이지의 실행 결과를 현재 위치에 삽입할 때
해설: jsp:include 액션태그는 다른 JSP 페이지의 실행 결과를 현재 페이지의 특정 위치에 삽입할 때 사용됩니다.
3. <jsp:include>의 "page" 속성의 역할은 무엇인가요?
    1. 버퍼를 플러시 할 지 결정
    2. 포함될 외부 jsp 페이지를 지정
    3. 객체를 생성하고 요청값을 전달
    4. 데이터를 해당 페이지에 전달
정답: 2. 포함될 외부 jsp 페이지를 지정
해설: jsp:include의 "page" 속성은 포함될 외부 jsp 페이지의 상대 경로나 절대 URL을 지정합니다.
4. <jsp:include>의 "flush" 속성의 역할은 무엇인가요?
    1. 포함될 외부 jsp 페이지를 지정
    2. 버퍼를 플러시 할 지 결정
    3. 데이터를 해당 페이지에 전달
    4. 객체를 생성하고 요청값을 전달
정답: 2. 버퍼를 플러시 할 지 결정
해설: jsp:include의 "flush" 속성은 출력 버퍼를 플러시할 지 여부를 결정합니다. 이는 기본값이 false로, true로 설정하면 현재까지의 출력 버퍼 내용이 클라이언트에게 전송되고 버퍼가 비워집니다.
5. 버퍼 개념이란 무엇인가요?
    1. 데이터가 특정 패킷(데이터 단위)에 도달할 때까지 표현되는 것
    2. 네트워크 속도가 좋지 않을 때, 현재 화면을 조금씩 로딩하는 것
    3. 버퍼 메모리를 사용하여 한꺼번에 화면을 구성하는 개념
    4. 화면을 구성하는데 어느 정도 데이터가 있는 패킷(데이터단위)가 있어야 표현이 되는 것
정답: 3. 버퍼 메모리를 사용하여 한꺼번에 화면을 구성하는 개념
해설: 버퍼는 데이터를 한꺼번에 모아 놓는 임시 저장공간입니다. 출력을 효율적으로 만들기 위해 버퍼 메모리를 사용하여 한꺼번에 화면을 구성합니다.
6. <jsp:forward> 액션태그는 어떤 상황에 사용되나요?
    1. 페이지 모듈화를 처리할 때
    2. 요청 흐름을 처리할 때
    3. 객체를 생성하거나 요청값을 전달할 때
    4. 다른 JSP 페이지의 실행 결과를 현재 위치에 삽입할 때
정답: 2. 요청 흐름을 처리할 때
	request요청값이 있거나 request범위 데이터가 있을 때,
	두개의 데이터와 함께 해당페이지 전송할 때, 사용된다.
	ps) a href, location.href
해설: jsp:forward 액션태그는 클라이언트로부터 받은 요청을 다른 자원(예: JSP 페이지, 서블릿 등)에게 전달할 때 사용됩니다.
7. <jsp:param> 액션태그는 어디에 사용되나요?
    1. <jsp:forward> 태그의 하위 태그
    2. <jsp:include> 태그의 하위 태그
    3. <jsp:useBean> 태그의 하위 태그
    4. <jsp:getProperty> 태그의 하위 태그
정답: 1. jsp:forward 태그의 하위 태그, 2. jsp:include 태그의 하위 태그
	req.jsp
		String name= request.getParamter("name");
		<jsp:forward>
			<jsp:param name="name" value="<%=name%>"/>
			이와같이 요청값이 있으면 굳이 param을 선언하지 않다고
			해당 페이지에서 request.getParamter("name");로
			받을 수 있다.

해설: jsp:param 액션태그는 jsp:forward 태그와 jsp:include 태그의 하위 태그로 사용되어 요청에 매개변수를 추가합니다.    
8. 제 2정규화의 주요 목표는 무엇인가요?
    1. 중복된 데이터를 최소화하고, 데이터의 무결성을 보장하기 위해 비-키(non-key) 속성 간의 종속성을 제거하는 것
    2. 모든 속성이 기본키에 완전 함수 종속적인 것을 보장하기 위해
    3. 다치 종속성을 제거하는 것(X)
    4. 모든 속성이 기본키에 부분적으로 종속적인 것을 보장하기 위해
정답: 1. 중복된 데이터를 최소화하고, 데이터의 무결성을 보장하기 위해 비-키(non-key) 속성 간의 종속성을 제거하는 것
	 
해설: 제 2정규화의 주 목적은 비-키 속성 간의 종속성을 제거하여 데이터 중복을 최소화하고 데이터 무결성을 보장하는 것입니다.
9. 제 2정규화를 통해 얻을 수 있는 이점 중 틀린 것은 무엇인가요?
    1. 데이터의 중복을 최소화하며, 더 효율적인 데이터 저장을 가능하게 한다.
    2. 데이터의 무결성을 보장하고 데이터의 변경, 삭제, 추가에 따른 오류를 최소화한다.
    3. 다치 종속성을 해결한다.
    4. 비-키(non-key) 속성 간의 종속성을 제거하고, 각 테이블이 단일 목적을 갖도록 설계한다.
정답: 3. 다치 종속성을 해결한다.
해설: 제 2정규화는 비-키 속성 간의 종속성을 제거하고, 데이터 중복을 최소화하는 것에 초점을 맞춥니다. 다치 종속성 해결은 제 3정규화의 영역입니다.
10. 다음 중 제 2정규화를 위반하는 예는 무엇인가요?
    1. 학생테이블에서 학번이 기본키이고, 이름과 전공이 각각 학번에 완전 함수 종속적인 경우
    2. 주문테이블에서 주문번호와 상품번호가 복합키이며, 주문일자와 주문수량이 복합키에 완전 함수 종속적인 경우
    3. 구매테이블에서 고객번호와 제품번호가 복합키이고, 고객명이 고객번호에만 부분적으로 종속적인 경우
    4. 의사테이블에서 의사번호가 기본키이고, 이름과 전문분야가 각각 의사번호에 완전 함수 종속적인 경우
정답: 3. 구매테이블에서 고객번호와 제품번호가 복합키이고, 고객명이 고객번호에만 부분적으로 종속적인 경우
해설: 제 2정규화는 모든 속성이 기본키에 완전 함수 종속적이어야 한다는 원칙을 가집니다. 이 예제에서 고객명이 고객번호에만 부분적으로 종속적이므로 제 2정규화를 위반합니다.
11. START WITH 절의 역할은 무엇인가요?
    1. SQL 쿼리를 시작하는 위치를 지정합니다.
    2. 계층 쿼리에서 최상위 노드를 지정합니다.
    3. 테이블을 시작하는 시점을 지정합니다.
    4. 데이터를 불러올 시작점을 설정합니다.
정답: 2. 계층 쿼리에서 최상위 노드를 지정합니다.
해설: START WITH 절은 Oracle 계층 쿼리에서 사용되며, 계층 구조의 최상위 노드를 지정하는데 사용됩니다.
12. CONNECT BY 절의 기능은 무엇인가요?
    1. 계층 구조에서 부모 노드와 자식 노드의 관계를 정의합니다.
    2. 서로 다른 테이블을 연결하는데 사용합니다.
    3. 데이터베이스 연결을 설정하는데 사용합니다.
    4. 각 행간의 연결을 지정합니다.
정답: 1. 계층 구조에서 부모 노드와 자식 노드의 관계를 정의합니다.
	사원정보의 부모 컬럼 mgr이고 자식컬럼 empno

해설: CONNECT BY 절은 계층 쿼리에서 부모 노드와 자식 노드의 관계를 정의하는데 사용됩니다.
13. 계층 쿼리에서 순서를 조정하기 위해 사용하는 절은 무엇인가요?
    1. ORDER BY
    2. GROUP BY
    3. ORDER SIBLINGS BY
    4. CONNECT BY
정답: 3. ORDER SIBLINGS BY

답변형 게시판.(제일마지막에 등록된 글이 제일 상단)
	마지막5
	    답글3
	    	답글2
	    	답글1
		답글2
		답글1
    글4
	글3
	글2
	
	[1][2][3]

해설: ORDER SIBLINGS BY 절은 계층 쿼리에서 형제 노드들 간의 순서를 정하는데 사용됩니다.
14. PRIOR 키워드의 기능은 무엇인가요?
    1. 이전 행의 데이터를 참조합니다.
    2. 계층적 쿼리에서 부모 노드를 참조합니다.
    3. 우선순위를 정하는데 사용합니다.
    4. 특정 컬럼의 이전 값을 참조합니다.
정답: 2. 계층적 쿼리에서 부모 노드를 참조합니다.
해설: PRIOR 키워드는 Oracle 계층 쿼리에서 사용되며, 부모 노드를 참조하는데 사용됩니다.
15. Oracle의 계층 쿼리에서 사용되는 LEVEL 키워드의 기능은 무엇인가요?
    1. 현재 노드의 계층 수준을 반환합니다.
    2. 데이터베이스의 레벨을 설정합니다.
    3. 특정 컬럼의 값 레벨을 결정합니다.
    4. 계층 구조의 깊이를 제한합니다.
정답: 1. 현재 노드의 계층 수준을 반환합니다.
해설: Oracle의 계층 쿼리에서 LEVEL 키워드는 현재 노드의 계층 수준(루트부터 현재 노드까지의 거리)을 반환합니다.



