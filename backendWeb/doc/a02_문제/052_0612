1. 다음 중 HttpServletResponse 객체에 대한 설명으로 틀린 것은 무엇인가요?
   1) HttpServletResponse 객체는 클라이언트에 정보를 전달하는 데 사용된다.
   2) HttpServletResponse 객체는 서버에서 클라이언트로 데이터를 전송할 때 사용된다.
   3) HttpServletResponse 객체는 클라이언트에서 서버로 데이터를 전송할 때 사용된다.
   4) HttpServletResponse 객체를 통해 데이터의 문자 인코딩 방식을 설정할 수 있다.
   
   # 둘다 서버안에서 실행.
   HttpServletRequest : 클라이언트 ==> 서버 전송 데이터 
   		id,pass 등 요청값을 전달했을 때, 받아서 변수로 할당 처리.
   	
   HttpServletResponse : 서버 ==> 클라이언트 전송 데이터(데이터/출력)
   

2. response.setCharacterEncoding("utf-8") 이후의 작업은 무엇인가요?
   1) 클라이언트에 데이터를 전송한다.
   2) 출력 스트림 객체를 생성한다.# ajax를 처리할 경우는.
   3) HTML 코드를 처리하기 위한 설정을 한다.# : html 처리할 때..
   4) 스트림 객체를 해제한다.
   
   response.setCharacterEncoding("utf-8");
   response.setContentType("text/html;charset=utf-8");

3. 다음 중 JSP 스크립트릿에 대한 설명으로 옳은 것은 무엇인가요?
   1) JSP 스크립트릿은 자바 코드 및 로직이 처리되는 부분이다.#
   2) JSP 스크립트릿은 변수나 상수, 메서드를 선언하는 데 사용된다. 선언
   3) JSP 스크립트릿은 html에 변수나 메서드를 출력할 때 사용된다. 익스프레션
   4) JSP 스크립트릿은 서버에서 처리되지 않는다.
   
   <% %>

4. 다음 중 service(request, response) 메서드와 관련있는 
   내장 객체는 무엇인가요?
   1) out
   2) session
   3) request
   4) 모두 #
   jsp ==> servlet
   servlet 기본적으로 지원하는 객체들을 class선언(type 선언)없이
   사용가능하다. 보이지 않지만 jsp 코드 자체내에 상단에 선언되어 있음.
   out : PrintWriter out = response.getWriter()
   request : service(HttpServletRequest request,...)
   session : HttpSession session = request.getSession()

5. 다음 중 JSP 주석에 대한 설명으로 틀린 것은 무엇인가요?
   1) JSP 주석은 클라이언트에 전달되지 않는다.
   2) JSP 주석은 서버단에서 처리된다.
   3) HTML 주석과 비슷하게 클라이언트에 전달된다.# 
   4) JSP 주석은 <!-- ... --> 형태로 표현된다.#
    <!-- ... --> : html 주석
   	<%-- --%> : jsp주석
 
6. 다음 중 JSP의 스크립트 선언부에 대한 설명으로 옳은 것은 무엇인가요?
   1) JSP가 Java로 변경될 때, 클래스명 밑에서 선언되는 부분이다.#
   2) JSP가 Java로 변경될 때, 메인 메서드에서 선언되는 부분이다.
   3) 변수 할당 및 활용을 포함한다.
   4) HTML 화면과 함께 로직 처리를 포함한다.
   
   JSP의 스크립트 선언부 : declaration 
   <%!  
   
   %>

8. 다음 중 JSP의 스크립트 표현식에 대한 설명으로 틀린 것은 무엇인가요?
   1) JSP의 스크립트 표현식은 <%=변수/메서드%> 형식으로 사용된다.
   2) HTML과 혼합해서 출력할 때 사용된다.
   3) JSP의 스크립트 표현식은 메인 메서드에서 처리되는 실제 화면을 구현하는 부분이다.#
   4) JSP의 스크립트 표현식은 자바 코드나 로직이 처리되는 부분이다.
   jsp는 화면에 html함께 처리되는 부분이라서, 
   java main()와 java의 코드가 실행된다는 점에서 유사하나,
   main()가 실행되는 것은 아니다.

9. session.setAttribute("s01", "himan")이 실행된 후, 
	session.getAttribute("s01")의 반환 값은 무엇인가요?
   1) "himan"#
   2) "s01"
   3) Null
   4) Error
   
   session : jsp의 내장 객체의 범위 중에 하나로,
   	특정한 값을 key/value형식으로 저장할 때, 사용한다.
   	key s01로 값 himan을 저장 처리하였기에
   	getAttribute()로 값을 가져올 수 있다.

10. response.getWriter()는 어떤 타입의 객체를 반환하나요?
    1) HttpServletResponse
    2) HttpServletRequest
    3) PrintWriter #
    4) String
    
    
1. 정답: 3) HttpServletResponse 객체는 클라이언트에서 서버로 데이터를 전송할 때 사용된다.
   설명: HttpServletResponse 객체는 서버에서 클라이언트로 응답을 전송하는 데 사용되는 객체입니다. 
   클라이언트에서 서버로의 데이터 전송에는 HttpServletRequest 객체가 사용됩니다.

2. 정답: 2) 출력 스트림 객체를 생성한다.
   설명: response.setCharacterEncoding("utf-8")은 클라이언트에게 보낼 응답의 문자 인코딩을 설정하는 작업입니다. 이 작업 후에는 주로 getWriter()나 getOutputStream()을 통해 출력 스트림 객체를 생성하고, 그 스트림을 통해 클라이언트에게 데이터를 전송합니다.

3. 정답: 1) JSP 스크립트릿은 자바 코드 및 로직이 처리되는 부분이다.
   설명: JSP 스크립트릿(<% ... %>)은 자바 코드를 포함하는 부분으로, JSP 페이지가 실행될 때 해당 코드가 실행됩니다.

4. 정답: 4) 모두
   설명: service(request, response) 메서드는 클라이언트의 요청을 처리하고 응답을 구성하는 메서드입니다. 이 메서드 내에서는 request, response, session, out 등의 내장 객체를 사용할 수 있습니다.

5. 정답: 3) HTML 주석과 비슷하게 클라이언트에 전달된다.
   설명: JSP 주석(<%-- ... --%>)은 서버단에서 처리되며 클라이언트에 전달되지 않습니다. 반면, HTML 주석(<!-- ... -->)은 서버를 거치지 않고 그대로 클라이언트에 전달됩니다.

6. 정답: 1) JSP가 Java로 변경될 때, 클래스명 밑에서 선언되는 부분이다.
   설명: JSP의 스크립트 선언부(<%! ... %>)는 JSP가 서블릿으로 변환될 때, 클래스 레벨에서 선언되는 부분입니다.

7. 정답: 이 질문은 특정 문맥이나 샘플 코드가 제공되지 않았기 때문에, 특정 정답을 제공하는 것은 불가능합니다.

8. 정답: 3) JSP의 스크립트 표현식은 메인 메서드에서 처리되는 실제 화면을 구현하는 부분이다.
   설명: JSP의 스크립트 표현식(<%= ... %>)은 HTML 페이지 내에서 자바 코드의 값을 출력하기 위해 사용됩니다. 이 표현식은 서블릿의 service 메서드에서 처리되며, 메인 메서드와는 무관합니다

9. 정답: 1) "himan"
   설명: session.setAttribute("s01", "himan")는 세션 객체에 "s01"이라는 이름으로 "himan"이라는 값을 저장하는 메서드입니다. 따라서 이후에 session.getAttribute("s01")를 호출하면, "himan"이 반환됩니다.

10. 정답: 3) PrintWriter
    설명: response.getWriter() 메서드는 응답에 문자 데이터를 보낼 때 사용하는 PrintWriter 객체를 반환합니다.
    
