# 예외와 예외  클래스
1. 프로그래밍을 하면, 에러나 여러가지 오류로 인하여 처리가 문제가
	발생하는 경우가 많다. 이러한 문제는 프로그램에 대한 신뢰성에
	치명적으로 영향을 미치기에 보다 효과적으로 대응하는 것이 필요하다.
2. 자바는 이러한 프로그래밍의 에러나 예외적인 상황에 대응하기 위하여
	예외 처리 코드를 api로 지원하고 있다.
3. 오류의 종류
	1) 에러를 처리하려면 우선 자바에서 발생하는 오류의 종류를 알고,
		해당 사항에 대한 적절한 오류 처리 방법을 코드로 구현하여야 한다.
	2) 오류는 크기 2가지로 나뉜다.
		- 에러
			하드웨어의 잘못된 동작 또는 고장으로 인한 오류
			에러가 발생되면 프로그램 종료
			정상 실행 상태로 돌아갈 수 없음
		- 예외
			사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인한 오류
			예외가 발생되면 프로그램 종료
			예외 처리 추가하면 정상 실행 상태로 돌아갈 수 있음
		==> 예외 처리를 통해, 에러의 내용을 파악하거나, 에러가 나더라도
			프로그램이 멈추지 않고 정상적인 처리를 하는 것으로 
			사용자의 *신뢰성 확보가 목적이다.
	3) 프로그래밍 처리 방법으로 인한 구분
		- 일반(컴파일 체크)예외
			예외 처리 코드 없으면 컴파일 오류 발생하는 것으로 보통
			컴파일도 안되기에 툴에서는 왼쪽에 빨간색으로 표기가 된다.
			==> 필수 예외 처리가 필요한 것으로 주로 IO(input output)
			처리되는 것과 메모리가 로딩되는 것등이 주로 이 예외 처리
			에러이다. ex) IO(파일읽기/쓰기/데이터 전송),DB 처리, 
			네트워킹 처리 등..
		- 실행(런타임 에러)예외
			예외 처리 코드를 생략하더라도 컴파일이 되는 예외로
			경험에 따라 예외 처리 코드 작성이 필요하다.
			실행 후, 실행되어 처리되는 데이터에 따라 예외를 발생하는 경우
			==> heap메모리 호출에러(NullPointerException), 
			배열에러(IndexOutOfBoundsException), 
			0나누기(ArithMethicException)등 프로그램에
			흔하게 발생하는 에러 처리이다.
4. 예외 처리 기본 형식
	1) 1단계 기본형식
		try{
			1예외가 나올 만한 코드
			2 ==> 해당 라인에서 예외 던짐..throw new XXXXX();
			      사용자 정의 예외 이외는 내부적으로 해당 예외를 던짐
			3 이후 라인은 수행하지 못 함
			4
			5
		}catch(Exception e){
		    Exception 상속관계의 상위이기에 하위 모든 예외를 받음.
			예외가 나왔을 때, 처리할 내용
			e.기능메서드() : 예외에 대한 정보를 처리할 수 있는 내용 수행
			e.getMessage() : 예외의 가장 기본 정보를 가져온다.
		} 	
		- try{} : 이 블럭안에 해당 예외가 발생가능한 코드를 입력한다.
			에러가 발생하는 순간, 그 즉시, 예외를 던진다. 
			주의) 해당 라인에서 즉시 수행된다.
		- catch(Exception e){} : try블럭에서 던진 예외를 처리하는
			블럭이다, 메개변수에 Exception 클래스는 예외처리의 상위
			클래스로 여러가지 예외 처리를 위한 정보를 기능메서드를 통해
			처리하는 객체이다.
		- 예외가 처리되면 계속 다음 이후 라인은 계속 수행된다.
			이 코드가 없으면 예외나 에러가 발생시 프로그램 자체가 멈추게 된다.
	2) 2단계 형식(계층적 처리)
		try{
			여러 예외가 발생할 수 있는 구문
		
		}catch(최하위예외클래스){  메모리가 가장 작고 범위가 좁은 것으로 부터
							   세부적인 예외 처리..실제 구현
		}catch(차상위예외클래스){
		
		}catch(상위예외클래스Exception e){ 메모리가 가장 크고 범위가 넓은 것까지 예외 처리
		
		}finally{ 예외가 발생하든지 상관없이 처리해야할 지역 영역 처리..
			
		}
	3) 3단계 예외의 위임
		필요성 : 예외가 나오는 구문을 위 try{}catch{}블럭으로
		모든 곳에 메서드별로 처리해야 하는데, 이것을 기능메서드별로 구분하여 처리하지 않고,
		이 메서드가 호출할 때, 처리하는 것을 예외의 위임이라고 한다.
		- 코드의 중복성을 줄이고,try{}catch{}블럭
			각 메서드별로 try{}catch{}블럭 사용하지 않아도 됨.
		- 체계적으로 분류하여 예외 처리를 관리하기 위한 목적 : 다중 예외처리를 통해 효과적
			으로 관리할 수 있다.
			ex) NullPointer 처리할 예외 블럭 내용 기술
				수학관련 처리할 예외 블럭 내용 기술
				배열관련 처리할 예외 블럭 내용 기술
				컴파일관련 처리할 예외 블럭 기술..
		
		메소드별로 예외를 위임하여 처리 : 2개 이상도 예외를 위임할 수 있다.
		void 메소드명() throws 위임할예외1, 위임할예외2...{
			예외가 처리될 가능성이 있는 코드
		}
		try{
			메소드명1() 예외가 위임되어서 호출되는 내용
			메소드명2()
		}catch(위임된 예외처리클래스1){
		
		}catch(위임된 예외처리클래스2){
		
		}
			
	4) 4단계 사용자 정의 예외 처리..	
		정의 ==> 조건문에 의해 강제 호출..
		class 사용자정의예외클래스 extends Exception{
			// 생성자 호출 super() : 상위 생성자 활용
			// ex) super("예외메시지전달!!")		
			// 재정의를 통해 기능적 변경( super.메서드().. )
			// ex) e.getMessage() :예외메시지전달!! 처리가 된다.
			// 추가기능메서드 선언.
		}	
		# Exception 추측
		class Exception{
			private String message;
			Exception(){}
			Exception(String message){
				this.message = message;
			}
			String getMessage(){
				return message;
			}
		}
		
		try{
			if(조건) 특정조건에 사용자정의 예외를 던지는 코드 처리..
				throw new 사용자정의예외();	
				
				
		}catch(사용자정의예외 ){
		
		}
	
	
			
				
5. 구체적인 예외를 어떻게 처리하는지?
	1) 위에서 이야기했다시피 예외는 크게 실행예외와 컴파일 예외가 있다.
	2) 우선 실행 예외를 처리해보자.
	3) 실행 예외의 종류 
		Exception 하위에 여러가지 실행 예외가 있다.
		- NullPointerException : 객체 메모리할당하지 않았는데 메모드 호출시
			발생하는 예외. 주로 데이터 로딩시 발생한다.
		- ArrayIndexOutOfBoundsException : 배열의 index번호에 데이터가
			없거나 해당 범위를 초과할 때, 발생한다.
		- ArithMethicException : 수학적인 연산시 발생하는 예외로 대표적인
			것이 0으로 나누었을 때 발생하는 예외
		- NumberFormatException : 형변환시 숫자형 문자가 아님에서 형변환
			메서드를 통해 처리할 때 발생하는 예외
			ex) Integer.parseInt("이십오")
	4) 예외 처리 방법1(Runtime error)
		- 예외가 처리되지 않는 예외가 나올 가망성이 있는 코드로 실행
		- 에러 내용에 해당 예외 내용을 확인할 수 있다. - 복사 처리
		- 기본 구문에 의해 예외 내용을 catch에서 매개변수로 예외 클래스 정의 처리한다.
		- 해당 내용의 예외 나왔을 때, 대체되거나 처리한 내용을 catch블럭에 넣는다.
		- 테스트 해본다.(강제 예외 발생/예외가 나지 않을 때)
	5) 예외 처리 방법2(Compile error)
		- 예외가 처리되지 않는 예외가 나올 가망성이 있는 코드로 입력
		- 왼쪽에 빨간색으로 예외 처리 내용이 나온다.
		- 더블 클릭으로 기본 구문을 생성한다. 
		- 해당 내용의 예외 나왔을 때, 대체되거나 처리한 내용을 catch블럭에 넣는다.
		- 테스트 해본다.	
6. 여러 개의 예외를 처리
	1) 특정 코드 블럭에 나올 수 있는 예외가 여러가지일 때, 그 예외에 대한
		처리의 필요성이 있을 때.
	2) 예외 처리방법
		- 한번에 예외 처리 : 모든 예외를 처리할 수 있는 상위 예외를 선언하면
			상속관계에 최상위가 예외(Exception)를 처리해준다.
			- 단점 : 세부적인 예외 처리를 간과한다.
			     특정 예외에 대한 처리 코드가 필요할 때, 다시 조건 처리하거나
			     해당 예외에 대한 처리가 복잡할 때가 많다.
		- 필요하고 구체적인 예외부터 먼저 처리하고, 그외에 예외를 처리한다.
			- 보다 예외를 구조화하여 처리하면 중요하고 핵심적으로 처리할 예외의
			구체적인 내용을 확인할 수 있다.
	3) 계층화된 예외 처리 
		- 예외의 상속 관계 확인
			최상위 예외 클래스는 가장 넓은 범위 예외이므로 가장 나중에 처리
						Exception(최상위)
			
		ClassNotFundException, InterruptionExpeption, RuntimeException 
						(컴파일예외)                       (실행예외)
												
		실행예외하위 클래스 - NullPonterException, NumberFormatException
			
		- 가장 메모리가 작고 세밀한 예외 부터 먼저 처리하고, 
			구체적으로 처리할 예외를 처리
			마지막에 최상위 예외를 처리
		- 예외가 있던 예외가 없던 처리할 블럭 수행 : finally{}
		ex)
		try{
			// 예외 가능성 있는 코드
		}catch(NullPointerException  e){ //최하위
		
		}catch(ClassNotFundException e){ //차상위
		
		}catch(Exception e){  // 상위 
		
		}finally{
			// 예외가 있든/없든 상관없이 처리해야 할 코드.
		}
		
		
							 
		
		
				
		
		
				
						
						
			
			
			
			
			
			
			
			