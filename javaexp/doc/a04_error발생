# 오타, 에러 발생
1.원인을 반드시 곰곰히 생각해서 추후에 정리 해놓도록 한다.
	재발 방지 방법에 대하여 정리해본다. ==> 에러 노트 정리
	주위 도움 받았으면 반드시 정리해놓는다.
	코드를 최대한 정리하면서 처리(계층적)
2. 왼쪽에 일단, 빨간색으로 표시가 되면 에러 발생
	커서를 가까이 하여 원인을 확인한다.
	- 해당 라인에 에러가 난 경우도 있지만, 앞라인에 문제가 있는 경우도
	있다.
3. 기본 변수 중복 선언이나 수업시 변수 선언 규칙에 맞는지 확인(기본)
	중복 선언
	;	
	
4. 왼쪽에 빨간색 없더라도 실행시 console창에 빨간색으로 나오는 것이
	실행에러이다. 변수 초기화, 데이터를 할당 없어서 발생하는 경우가
	많다.
5. 중괄호 블럭이 제대로 닫히지 않는 경우 에러 발생.
	- 블럭이 나오는 내용은 {} 시작과 끝을 먼저 만들고 삽입하는
		형식으로 코드를 하면 예방할 수 있다.
		for(){
		
		}
		if(){
			
		}
							
# 프로세서 문제 발생시
1. 실행창(console) 상단에 []빨간색 - terminator 클릭
	- 무한 반복시 발생 에러
2. ctrl+alt+del 작업관리자에서 eclipse 중단 처리

# 여러가지 에러 유형의 원인
1. java.lang.ArrayIndexOutOfBoundsException
	배열의 크기가 초과될 때, 발생한다.
	배열의 크기를 확인하고, 해당 index번호의 범위 안에 있는지
	를 확인한다. index범위를 변경하여야 한다.
	주의) 배열의 크기 index번호 -1
	배열의 크기를 2 new int[2]
	array[2]
2. 컴파일과 실행과정으로 소스 반영이 안되는 경우	
	1) 소스코드 후, 반드시 ctrl+s(저장)을 하고, 실행(ctrl+f11)을
	처리하자.
	2) 혹, 변경된 소스가 반영이 안되는 경우는 공백을 몇 개 삽입후,
	다시 ctrl+s(저장) 실행(ctrl+f11)한다.
# import 에러
 보통 동일한 이름의 클래스이고 패키지명이 달라 import을 잘못하여 
			  기능이 처리되지 않은 경우가 많다. 
			  상속관계, 외부 클래스의 기능 메서드의 사용관계 등에 주로 발생한다.
			  완전히 구조가 같더라도 해당 객체의 지정된 패키지와 동일한 클래스가 아니면
			  다른 객체를 호출하거나 처리할 때, 에러나서 처리가 되지 않는다.
			  compile 에러/run time 에러 발생..
