# 메서드 처리
1. 지식계열화
	1) 메서드의 기본 구성요소들을 만들 수 있다.
		리턴유형, 입력값(매개변수), 
		프로세스처리(저장, 조건/반복문처리, 화면출력)
		리턴값처리
	2) 메서드의 매개변수을 알고 메서드 오버로딩 규칙을 이해하고
		코딩할 수 있다.
	3) 매서드의 매개변수를 통해서 전역변수에 할당할 수 있고,
		그 지역변수와 전역변수를 이해하고 있다.
	4) 메서드의 리턴값 처리
		- 메서드에서 리턴타입과 리턴값의 의미를 이해하고 있고
			실제 데이터에 따라서 리턴데이터를 처리할 수 있다.
		- 메서드에 지역변수를 이용하여 리턴값을 처리할 수 있다.
		- 메서드에 전역변수를 이용하여 리턴값을 처리할 수 있다.
	5) 메서드 매개변수(입력값) + 리턴값 처리
	6) 메서드 매개변수(입력값) + 프로세스처리
		- 저장(지역변수/전역변수)
		- 조건/반복문처리
		- 화면출력 처리
	7) 메서드 매개변수(입력값) + 프로세스처리 + 리턴값처리

# 메서드 오버로딩
0. 변수와 비교 선언 규칙
	1) 변수 : 변수명 자체로 구분하여 동일한 변수를 중복불가
	2) 생성자/메서드 : 생성자/메서드명 + 매개변수 식별해서 선언한다..
1. 생성자의 오버로딩과 함께 메서드에서도 메서드명과 + 매개변수를 통해서,
	메서드를 선언할 수 있는 규칙을 말한다.
2. 아래와 같은 클래스내에서 동일한 이름의 메서드를 호출할 수 있는 규칙을 말한다.
	class MethodOverloading{
		String name;
		String name;(x)//변수명 동일한 이름으로 선언이 불가능
	
		// 메서드는 메서드명과 매개변수의 갯수, 타입, 순서로
		// 식별할 수 있을 때, 선언이 가능하다.
		void add(){
			System.out.println("매개변수가 없는 메서드");
		}
		void add(){ (x)
			System.out.println("매개변수가 없는 메서드");
		}		
		void add(int num01){
			System.out.println("매개변수가 1개 있는 메서드"+num01);
		}
		void add(double num01{
			System.out.println("매개변수가 타입이 다른 메서드"+num01);
		}
		void add(int num01, double num02){
			System.out.println("매개변수 순서1"+num01);
			System.out.println("매개변수 순서1"+num02);
		}
		void add(double num01, int num02){
			System.out.println("매개변수 순서2"+num01);
			System.out.println("매개변수 순서2"+num02);		
		}
	}
	main(){
		MethodOverloading m01 = new MethodOverloading();
		m01.add(); //
		m01.add(25); // 1. 매개변수의 갯수
		m01.add(25.75); // 2. 매개변수의 타입
		m01.add(25, 25.75); // 3. 매개변수의 타입의 순서
		m01.add(25.75, 25); // 4. 매개변수의 타입의 순서
		
	
	}	
# 메모리 발전
1. 하나의 변수 ==> 배열(같은 유형/같은 이름-index)
	 ==> 클래스(다른유형 참조명.속성) ==> **객체형 배열 ==> 객체안에 객체 
	 ==> 객체안에 배열형 객체/객체안에 collection형 객체
	  	
	# collection형 객체
	1. list(index값 가진 나열형), set(중복불가하는 객체), map(key/value형태 객체)
	# list형(활용도가 가능 높음)
	1. List<Product> plist = new ArrayList<Product>();
	   plist.add(new Product("사과",3000,2));
	   plist.add(new Product("바나나",4000,3));
	   plist.add(new Product("딸기",12000,4));
	   plist.get(0) : new Product("사과",3000,2)
	   plist.size() : 리스트객체의 크기
	   for(Product pro:plist){
	   		pro.getName();..
	   }
	
# 관계형 객체
1. 객체의 여러 관계를 통해서 효율적으로 객체지향적인 프로그램으로
	설계를 하고 처리를 할 수 있다.
2. 관계형 객체에서 다룰 개념
	1) 패키지개념 이해
		- 순수한 객체는 패키지명.클래스가 실제 객체의 이름이다.
			- 같은 패키지 내에서 같은 이름을 클래스 선언이 불가능
			- 다른 패키지는 같은 이름을 클래스 선언으로 가능 
		- 같은 패키지내에서 호출하는 객체
			패키지명을 생략하여도 호출이 가능하다.
			접근제어자가 public 아니더라도 접근이 가능하다.
				- default 접근 제어자 : 접근 제어자가 붙지 않는다.
			같은 패키지에 같은 클래스명을 선언하여 사용할 수 없다.
	 	- 다른 패키지에 있는 클래스를 객체로 호출
	 	    1) 접근제어가 public이어야지 접근이 된다.
	 	    	package javaexp.a02;
	 	    	선언이 가능 경우 : Person p1; ==> (public) class Person
	 	    		# 주의 : 최상 클래스선언 접근이 불가능하면,
	 	    		하위 구성요소에 대한 접근이 가능하더라도 접근할 수 없다.
	 	    	생성이 가능한 경우 : p1 = new Person("마길동");
	 	    	==> (public) Person(String name)
	 	    	구성요소의 접근이 가능한 경우 : p1.name, p1.setName("홍길동");
	 	    	==> (public) String name;
	 	    		(public) void setName(String name){
	 	    		
	 	    	package javaexp.a01;
	 	    	public class Person{
	 	    		public name;
	 	    		public Person(String name){
	 	    			this.name = name;
	 	    		}
	 	    		public void setName(String name){
	 	    			this.name = name;
	 	    		}
	 	    	}
	 	    2) 외부에 패키지에 있는 클래스의 객체를 호출할 때는
	 	    	import하여야 한다.
	 	    	import를 하는 궁극적인 목적인 객체를 생성하거나
	 	    	선언하는 곳에서 패키지명 없이 사용하기 위한 목적이다.(사용자정의)
	 	    3) 동일한 곳에서 같은 이름의 클래스를 가지 다른 패키지의
	 	    	객체를 생성할려면 package명.클래스명의 형식으로
	 	    	객체를 생성하여야 한다.	
	 	    ex)
			javaexp.a08_relation.Person 
				p02 = new javaexp.a08_relation.Person();
	2) 접근제한자(접근제어자-access modifier)
		- 객체가 객체를 호출할 때, 객체의 구성요소에 
			대한 접근제어자의 범위 안에서 해당 객체의 구성요소를
			접근할 수 있다. ==> encapsulation 개념
		- 클래스의 구성요소에 따른 접근 제어 범위
			0) 접근제어범위 
				public : 어느 객체가 접근이 가능하게 선언
				protected : 상속한 객체만 외부패지에 있더라도 접근가능
				X(제어자가 붙지않는 경우) : 같은 패키지안에 있는 때만 접근 가능
				private : 다른 객체는 접근이 불가능하게 선언
		 	1) 접근제어 범위 선언 범위과 영향
		 		- 상위 블럭이 접근이 일단 되야 되고, 그 다음 하위 블럭의
		 			구성요소에 대한 접근 확인한다. 
		 		- 클래스 선언	
		 			public class 클래스명{}
		 			
		 			외부에서 객체를 선언할 때 영향을 미친다.
		 			Person p01; (접근가능)
		 			class 클래스명{}
		 			외부패키지안에 클래스에서 선언을 할 때, 호출을 하지 못한다.
		 			Person p02; X
		 			같은패키지에 있을 때만 접근이 가능하다.
		 			
		 			
		 		- 클래스내의 구성요소
		 			주의) 구성요소는 클래스 접근이 될 때,
		 			다시 접근제어자에 의해 가능한 경우에만 접근이된다.
		 			
		 			필드: private String name;
		 			생성자 : public Person(){}
		 			메서드 : public void show(){};	
			
			
			
	3) 객체안에 객체 호출(클래스 안에 다른 객체 호출 및 사용)
		- 1:1 객체 개념
		- 다중 객체 개념
		- 1:다 객체 개념	
ex)
	a05_pck
		Passenger
			선언
			Bus b1;
			Car c1;(X)
			void call(){
				b1 = new Bus(); (O)
				b1 = new Bus(7788); (x)
			    b1 = new Bus("서울행",9999) (O)
			    System.out.println(b1.no); (O)	
			    System.out.println(b1.target); (X)	
			}				
	a06_pck
		Bus
			no
			target
		Car			 
# 1:1관계 객체
1. class의 선언에서 앞으로 사용될 객체를 내부에서 호출하여
	사용하는 것을 말한다. 
2. 객체지향 프로그램에서 여러 개의 객체를 사용하는 첫단계라고 할 수 
	있다.
3. 처리 순서
	1) 객체 관계 구조 결정(요구사항이나 업무적 처리를 기준으로)
		ex) 온라인 쇼핑몰안에 회원들, 구매물품,..  
		핸드폰/핸드폰사용자 :
		핸드폰사용자가 구매를 통해서 핸드폰 객체를 가지고,
		핸드폰을 활용하는 처리를 프로그램상 구현해보자.. 
		ex) 자동차안에 바퀴
		ex) 컴퓨터안에 부품(Cpu, Ram, Ssd)
			
	2) 포함될 객체 클래스 선언(속성, 생성자, 기능메서드)
		class HandPhone
			필드 : 제조사, 가격
			메서드 : 사용  @@제조사의 핸드폰으로 통화하다.
					정보출력 제조사:@@@, 가격:@@@
	3) 포함할 클래스에서 포함될 객체를 호출 및 선언
		 포함할 클래스의 고유 속성 : 이름, 회사명, 마트명, 쇼핑몰명..
		 포함될 객체의 선언 : 클래스명 참조명	
	4) 기능 메서드 처리로 해당 포함될 객체 내용도 선언처리
		class HPUser{
			필드 : 사용자명, HandPhone phone;
			메서드 :
				포함될 객체가 들어오는 메서드
				void buyPhone(HandPhone phone) : 핸드폰객체 구매
					this.phone = phone; 외부에 실제 폰객체가 생성해서 들어왔을 때 메모리에 할당.
					
				void callByPhone() : 핸드폰으로 전화
					if(phone==null){ 해당 객체에 메모리가 할당되지 않을 때.
						phone.XXX :폰객체가 가지고 있는 메소드등을 사용불가능..
							nullpointerexception 발생..
						System.out.println("전화기가 없습니다.");
					}else{ 메모리 할당되었을 때..(phone!=null)
						phone.show() : 폰객체가 가지고 있는 메소드등을 사용가능.
					}
				void checkMyPhoneInfo() :핸드폰 정보 확인
				
		}
	5) main()
		핸드폰 객체 생성 HandPhone p01 = new HandPhone();
		사용자 객체 생성 HPUser hu01 = new HPUser();
		사용자 객체의 핸드폰 정보확인메서드 호출 : 핸드폰이 없음.
				hu01.callByPhone();
		사용자 객체의 핸드폰 구매메서드 호출
				hu01.buyPhone(p01);
		사용자 객체의 핸드폰 사용메서드 호출
				hu01.callByPhone(); : 핸드폰 객체를 사용가능
		사용자 객체의 핸드폰 정보확인메서드 호출
				hu01.checkMyPhoneInfo();

# 객체형 배열
1. 실무상 가장 많이 활용되는 데이터 처리 유형이다.
2. 데이터 단위가 2차원(행/열)단위로 테이블로 설정되어 있다면, 이 데이터를
	row단위로 속성과 속성값 형태로 하나의 클래스를 선언하고, 이 클래스를
	통해 배열형 객체 리스트를 만들어서 처리하는 것을 말한다.
	ex) 사원정보
	사원번호 사원명 직책명 급여 	부서번호
	1001   홍길동	 사원	  3500  10
	1002   김길동	 대리	  4500  20
	1003   신길동	 과장  5500  30
	==> 한 row 단위로 저장할 클래스를 정의하고,
	class Emp{
		int empno;
		String ename;
		String job;
		double sal;
		int deptno
	}	
	# VO(value object)클래스 선언 방법
	1) 2차원테이블의 컬럼명과 데이터를 확인해서 데이터유형 속성명을 결정한 후
	2) 필드는 private로 접근제어자 선언
	3) 생성자는 매개변수가 없는 생성자, 전체데이터를 입력할 수 있는 생성자 생성
	4) public set/getXXX 메서드 생성
	5) 추가적인 기능 처리 메서드 선언.. 	
	==> 이 클래스를 여러 개로 배열에 할당하여, list된 데이터를
	처리한다.
	Emp[] elist = {
					new Emp(1001,"홍길동","사원",3500,10),
					new Emp(1002,"김길동","대리",4500,20),
					new Emp(1003,"신길동","과장",5500,30),
	              };
	==> 이러한 2차원 테이블 데이터를 객체형 배열로 처리하여 화면이나
	데이터 등록/수정/삭제등에 활용한다.  
	==> collections 하위에 List/ArrayList로 동적배열에 할당하여
	처리하는 것이 일반적이다.            
3. 처리 순서
	1) 2차원 형태의 데이터 확인( 각 열별 속성의 유형과 크기를 확인)
	2) 위 열별 속성에 맞는 데이터유형과 속성명에 맞게 클래스 선언.
		class VO클래스명{
			private 속성유형 컬럼명;
		}		
	3) 초기값 설정 생성자 선언 : 전체 데이터가 들어 갈 수 있는
		생성자를 선언
	4) set/get메서드 선언
	5) 배열 선언과 객체 할당.
		1) 크기를 선언하고 할당
			 클래스명[] 참조변수 = new 클래스명[크기];
			 참조변수[0] = new 생성자(초기데이터1,데이터2...);
			 참조변수[1] = new 생성자(초기데이터1,데이터2...);
			 참조변수[2] = new 생성자(초기데이터1,데이터2...);
		2) 바로 객체 생성과 함께 할당
			 클래스명[] 참조변수 = {new 생성자(...),new 생성자(...)..}
		3) List형으로 선언후, 할당(generic, collection 이후 진행)
			실무적으로 DB에서 가져오는 유형은 List형태가 많다.
			import java.util.*;
			List<클래스명> list = new ArrayList<클래스명>();
			list.append(new 생성자(....));
			list.append(new 생성자(....));
			list.append(new 생성자(....));		
	6) 반복문을 통한 조회 및 활용..
		for(단위 객체:객체형배열참조변수){
			객체.메서드호출();
		}
		ex) 
		for(Emp emp:elist){
			System.out.print(emp.getEmpno()+"\t");
			System.out.print(emp.getEname()+"\t");
			System.out.print(emp.getJob()+"\t");
			System.out.print(emp.getSal()+"\t");
			System.out.print(emp.getDeptno()+"\n");
		}
# 1:다 관계형 객체
1. 하나의 객체안에 여러 유형의 객체를 처리하는 것을 말한다.
2. 쇼핑몰에 물건을 구매하거나, 쇼핑몰에 여러 회원을 관리하는 등,
	실무적으로 많이 활용되는 객체 관계 구조이다.
3. 추후, 상속에서 다형성이라는 개념에 의해 여러 종류의 객체로 할당할 수 있다.
4. 기본 구조
	1) 포함될 단위 클래스 선언
		class Product
			name, price, cnt
	2) 포함할 클래스 선언
		- 기본 속성 정의
		- 포함될 단위 클래스를 배열형태로 선언
		- 생성자나 메서드에 의해 포함될 단위 객체의 갯수를 지정한다.
		class Mart{
			String name;
			Product[] pArry;
			int idx;// 포함될 배열객체의 시작 index 지정.
			void goMartPlan(int cnt){
				System.out.println("물건을 "+cnt+"종류를 구매하기로 했습니다");
				pArry = new Product[cnt]; 
				// 포함될 객체의 배열의 수를 지정해서 생성 
			}
			void buyProduct(Product prod){
				if(idx<cnt){
					pArry[idx]=prod;
					idx++
					System.out.println(prod.getName()+"를 "+
						prod.getCnt()+"구매하였습니다");
					if(idx==cnt){
						System.out.println("구매할 물건 종류의 갯수를 채웠습니다");
					}
				}else{
					System.out.println("구매할 종류의 갯수를 초과하였습니다");
				}
			}
			void showProducts(){
				System.out.println(name+"에서 구매한 물건들~~");
				int tot=0;
				-- 물건명  가격  갯수 단위계
				for(Product prod:pArry){
					prod.getName()
					prod.getPrice()
					prod.getCnt()
					int sum =prod.getPrice()*prod.getCnt()
					tot+=sum
				}
				System.out.println("구매비용총비용:"+tot;
				
			}
			
		} 
				
			
		
		