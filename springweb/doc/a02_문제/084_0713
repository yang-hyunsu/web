1. 아래 코드는 어떤 내용을 구현하고 있을까요?
	<bean id="p01" class="a01_diexp.z01_vo.HandPhone">
		<constructor-arg value="갤럭시s22"/>
		<constructor-arg value="삼성"/>
	</bean>		 
	<bean id="u01" class="a01_diexp.z01_vo.HPUser">
		<constructor-arg value="홍길동"/>
		<property name="handPhone" ref="p01"/>
	</bean>	  

   a. Spring IoC 컨테이너를 생성하고 객체를 검색합니다.
   b. XML 파일을 파싱하여 Bean을 등록하고 객체를 생성합니다.
   c. Bean의 의존성을 주입하고 객체를 초기화합니다.
   d. Bean을 가져와서 메서드를 호출하고 객체를 사용합니다.

2. Spring의 IoC(Inversion of Control) 컨테이너 역할을 하는 클래스는 무엇인가요?
   a. ApplicationContext
   b. BeanFactory
   c. GenericXmlApplicationContext
   d. AbstractApplicationContext

3. <bean> 태그에서 객체를 생성할 때 사용하는 속성은 무엇인가요?
   a. id
   b. class
   c. constructor-arg
   d. property

4. <property> 태그는 어떤 용도로 사용되나요?
   a. 객체의 생성자 인자를 설정하기 위해
   b. 객체의 속성 값을 설정하기 위해
   c. 객체의 의존성을 주입하기 위해
   d. 객체를 초기화하기 위해

5. 객체를 생성할 때 생성자 인자를 설정하는 방법은 무엇인가요?
   a. constructor-arg 태그를 사용합니다.
   b. property 태그를 사용합니다.
   c. ref 속성을 사용합니다.
   d. value 속성을 사용합니다.

6. 생성자 인자를 설정할 때 사용하는 <constructor-arg> 태그의 속성은 무엇인가요?
   a. name
   b. value
   c. ref
   d. type

7. 속성 값을 설정할 때 사용하는 <property> 태그의 속성은 무엇인가요?
   a. name
   b. value
   c. ref
   d. type

8. 객체를 가져올 때 사용하는 메서드는 무엇인가요?
   a. ctx.getBean()
   b. ctx.retrieveBean()
   c. ctx.fetchBean()
   d. ctx.findBean()

9. 스프링에서 DI(Dependency Injection)를 구현하기 위해 사용하는 방법은 무엇인가요?
   a. 생성자 주입(Constructor Injection)
   b. 속성 주입(Property Injection)
   c. 메서드 주입(Method Injection)
   d. 모두 사용합니다.

10. DI를 사용하는 이유는 무엇인가요?
    a. 객체의 의존성을 줄이고 유연한 구조를 만들기 위해
    b. 코드의 중복을 제거하고 재사용성을 높이기 위해
    c. 유지보수성을 향상시키고 테스트하기 쉬운 코드를 작성하기 위해
    d. 모든 정답이 맞습니다.

11. 객체를 생성하고 의존성을 주입하는 작업을 Spring 컨테이너가 자동으로 처리해주는 개념은 무엇인가요?
    a. Bean 등록
    b. Bean 검색
    c. Bean 초기화
    d. Bean 자동 연결

12. <constructor-arg> 태그의 ref 속성은 무엇을 의미하나요?
    a. 다른 Bean을 참조하여 의존성을 주입합니다.
    b. 생성자 인자에 값을 설정합니다.
    c. 생성자 인자의 타입을 지정합니다.
    d. 생성자 인자의 순서를 지정합니다.

13. <property> 태그의 ref 속성은 무엇을 의미하나요?
    a. 다른 Bean을 참조하여 의존성을 주입합니다.
    b. 속성의 값을 설정합니다.
    c. 속성의 타입을 지정합니다.
    d. 모든 정답이 맞습니다.

14. <property> 태그의 value 속성은 무엇을 의미하나요?
    a. 속성의 값을 설정합니다.
    b. 다른 Bean을 참조하여 의존성을 주입합니다.
    c. 속성의 타입을 지정합니다.
    d. 속성의 이름을 지정합니다.

15. ApplicationContext의 close() 메서드를 호출하는 이유는 무엇인가요?
    a. 컨테이너에서 객체를 해제하고 리소스를 반환하기 위해
    b. 컨테이너의 동작을 종료하기 위해
    c. 컨테이너와 관련된 설정 정보를 저장하기 위해
    d. 모든 정답이 맞습니다.

16. Spring의 IoC 컨테이너는 무엇을 담당하나요?
    a. Bean의 생성과 관리
    b. 요청과 응답의 처리
    c. 데이터베이스 연동
    d. 모든 정답이 맞습니다.

17. ApplicationContext와 BeanFactory의 차이점은 무엇인가요?
    a. ApplicationContext는 BeanFactory의 서브 인터페이스입니다.
    b. ApplicationContext는 더 많은 기능을 제공합니다.
    c. ApplicationContext는 미리 Bean을 인스턴스화하고 관리합니다.
    d. 모든 정답이 맞습니다.

18. Spring의 DI(Dependency Injection)는 무엇을 의미하나요?
    a. 객체 생성 시 필요한 의존성을 주입하는 개념입니다.
    b. 객체 간의 상호작용을 통해 의존성을 해결하는 개념입니다.
    c. 객체의 생명주기를 관리하는 개념입니다.
    d. 모든 정답이 맞습니다.

19. Spring의 DI(Dependency Injection)는 어떤 장점을 가지고 있나요?
    a. 코드의 재사용성을 높이고 중복을 제거합니다.
    b. 객체 간의 결합도를 낮추고 유지보수성을 향상시킵니다.
    c. 테스트하기 쉬운 코드를 작성할 수 있습니다.
    d. 모든 정답이 맞습니다.

20. Spring의 DI(Dependency Injection)는 어떤 방식으로 동작하나요?
    a. 생성자를 통한 주입(Constructor Injection)
    b. 속성을 통한 주입(Property Injection)
    c. 메서드를 통한 주입(Method Injection)
    d. 모든 정답이 맞습니다.
    


1. 답: b. XML 파일을 파싱하여 Bean을 등록하고 객체를 생성합니다.
   해설: 주어진 코드는 XML 파일을 로드하여 Spring IoC 컨테이너를 생성하고, XML 파일에 등록된 Bean을 생성하는 과정을 나타냅니다.

2. 답: a. ApplicationContext
   해설: Spring의 IoC 컨테이너 역할을 하는 클래스는 ApplicationContext입니다. ApplicationContext는 BeanFactory의 확장된 버전으로, 더 많은 기능을 제공합니다.

3. 답: c. constructor-arg
   해설: <bean> 태그의 <constructor-arg> 속성을 사용하여 생성자 인자를 설정합니다. 이 속성은 생성자의 매개변수 순서에 맞게 값을 설정합니다.

4. 답: b. 객체의 속성 값을 설정하기 위해
   해설: <property> 태그는 객체의 속성 값을 설정하기 위해 사용됩니다. 이 속성 값을 통해 객체의 상태를 초기화할 수 있습니다.

5. 답: a. constructor-arg 태그를 사용합니다.
   해설: 생성자 인자를 설정할 때는 <constructor-arg> 태그를 사용합니다. 이 태그의 value 속성을 통해 생성자 인자 값을 설정합니다.

6. 답: c. ref
   해설: <constructor-arg> 태그의 ref 속성은 다른 Bean을 참조하여 의존성을 주입할 때 사용합니다. 해당하는 Bean의 id를 ref 속성 값으로 설정합니다.

7. 답: a. name
   해설: <property> 태그의 name 속성은 설정하려는 객체의 속성 이름을 지정합니다. 해당하는 객체의 setter 메서드를 자동으로 호출하여 속성 값을 설정합니다.

8. 답: a. ctx.getBean()
   해설: 스프링 컨테이너에서 객체를 가져오기 위해 ctx.getBean() 메서드를 사용합니다. 첫 번째 인자로 Bean의 id 또는 이름을 지정하고, 두 번째 인자로 해당 객체의 클래스를 지정합니다.

9. 답: d. 모두 사용합니다.
   해설: 스프링에서는 생성자 주입(Constructor Injection), 속성 주입(Property Injection), 메서드 주입(Method Injection)을 모두 사용하여 의존성 주입을 구현할 수 있습니다.

10. 답: a. 생성자 주입(Constructor Injection)
    해설: 스프링에서는 생성자 주입(Constructor Injection)을 통해 인자 값을 객체에 주입할 수 있습니다. 생성자를 통한 의존성 주입은 객체의 생성 시점에 의존성을 명시적으로 전달할 수 있는 방법입니다.

11. 답: d. Bean 자동 연결
    해설: 스프링 컨테이너는 Bean 자동 연결 기능을 제공하여 객체 생성 및 의존성 주입을 자동으로 처리할 수 있습니다. 이를 통해 코드의 중복을 제거하고 객체 간의 의존성을 쉽게 관리할 수 있습니다.

12. 답: a. 다른 Bean을 참조하여 의존성을 주입합니다.
    해설: <constructor-arg> 태그의 ref 속성은 다른 Bean을 참조하여 해당 생성자 인자에 의존성을 주입합니다. ref 속성에는 해당 Bean의 id가 지정되어야 합니다.

13. 답: a. 다른 Bean을 참조하여 의존성을 주입합니다.
    해설: <property> 태그의 ref 속성은 다른 Bean을 참조하여 해당 속성에 의존성을 주입합니다. ref 속성에는 해당 Bean의 id가 지정되어야 합니다.

14. 답: b. 속성의 값을 설정합니다.
    해설: <property> 태그의 value 속성은 해당 속성에 값을 설정하는 역할을 합니다. 이를 통해 객체의 속성 값을 초기화할 수 있습니다.

15. 답: a. 컨테이너에서 객체를 해제하고 리소스를 반환하기 위해
    해설: ApplicationContext의 close() 메서드를 호출하여 컨테이너에서 객체를 해제하고 사용한 리소스를 반환합니다. 이를 통해 메모리 누수를 방지할 수 있습니다.

16. 답: a. ApplicationContext
    해설: ApplicationContext는 스프링의 IoC 컨테이너를 구현한 인터페이스입니다. 스프링 애플리케이션에서는 ApplicationContext를 사용하여 Bean의 라이프사이클 관리와 의존성 주입을 처리합니다.

17. 답: d. 모든 정답이 맞습니다.
    해설: 스프링에서는 여러 가지 방식으로 DI(Dependency Injection)를 지원합니다. 생성자 주입, 속성 주입, 메서드 주입을 조합하여 필요에 따라 사용할 수 있습니다.

18. 답: a. constructor-arg
    해설: <bean> 태그의 <constructor-arg> 속성은 생성자 인자를 설정하는데 사용됩니다. 이를 통해 객체를 생성하면서 필요한 인자 값을 전달할 수 있습니다.

19. 답: b. 속성을 통한 주입(Property Injection)
    해설: 스프링에서는 <property> 태그를 사용하여 객체의 속성 값을 설정하는 속성 주입 방식을 제공합니다. 이를 통해 객체 생성 후에도 속성 값을 변경할 수 있습니다.

20. 답: d. 모든 정답이 맞습니다.
    해설: Spring의 DI(Dependency Injection)는 생성자를 통한 주입(Constructor Injection), 속성을 통한 주입(Property Injection), 메서드를 통한 주입(Method Injection) 등 다양한 방식을 지원합니다. 모든 방식을 적절히 활용하여 의존성을 주입할 수 있습니다.
    