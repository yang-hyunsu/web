1. 클라이언트에서 URL을 입력하면 어떤 프로세스를 거치게 될까요?
   a. 웹서버 호출 -> web.xml 호출 -> dispatcher-servlet.xml 호출 -> Controller 호출 -> JSP 호출
   b. dispatcher-servlet.xml 호출 -> web.xml 호출 -> Controller 호출 -> JSP 호출 -> 웹서버 호출
   c. web.xml 호출 -> dispatcher-servlet.xml 호출 -> Controller 호출 -> JSP 호출 -> 웹서버 호출
   d. 웹서버 호출 -> JSP 호출 -> Controller 호출 -> dispatcher-servlet.xml 호출 -> web.xml 호출

2. @RequestParam 어노테이션은 어떤 역할을 하나요?
   a. 요청된 URL에서 파라미터 값을 추출합니다.
   b. 요청된 URL을 처리하기 위한 컨트롤러 메서드를 지정합니다.
   c. 요청된 URL의 특정 부분을 매핑합니다.
   d. 요청된 URL을 처리하는 데 필요한 모델 데이터를 설정합니다.

3. 스프링 MVC에서 컨트롤러가 반환하는 String 값은 무엇을 의미하나요?
   a. 뷰 이름을 나타냅니다.
   b. 클라이언트에게 전달할 데이터를 나타냅니다.
   c. 요청된 URL에 대한 처리 결과를 나타냅니다.
   d. 컨트롤러의 실행 결과를 나타냅니다.

4. Model 객체를 사용하여 뷰에 데이터를 전달할 수 있나요?
   a. 가능합니다. Model 객체에 데이터를 추가하고, 컨트롤러에서 반환할 때 해당 모델 객체를 사용합니다.
   b. 불가능합니다. 뷰에 데이터를 전달하기 위해서는 다른 방법을 사용해야 합니다.
   c. Model 객체는 컨트롤러에서만 사용되며, 뷰에 데이터를 전달할 수는 없습니다.
   d. Model 객체는 스프링 MVC의 내부적인 사용을 위해 존재하며, 개발자가 직접 활용할 수는 없습니다.


1. a - 클라이언트에서 URL을 입력하면 웹서버가 호출되고, web.xml을 통해 요청된 URL에 대한 처리를 담당하는 서블릿이 호출됩니다. 이후에는 dispatcher-servlet.xml에서 해당 URL에 매핑된 컨트롤러가 호출되고, 컨트롤러에서는 필요한 데이터를 처리한 후 JSP를 호출하여 화면을 출력합니다.

2. a - @RequestParam 어노테이션은 요청된 URL에서 파라미터 값을 추출하기 위해 사용됩니다. 파라미터 이름과 매핑될 변수를 지정하여 해당 변수에 파라미터 값을 할당합니다.

3. a - 컨트롤러에서 반환하는 String 값은 뷰의 이름을 나타냅니다. 이 뷰의 이름은 뷰 리졸버에 의해 실제로 사용될 JSP 파일의 경로를 찾는 데 사용됩니다.

4. a - Model 객체를 사용하여 컨트롤러에서 뷰로 데이터를 전달할 수 있습니다. Model 객체의 addAttribute() 메서드를 사용하여 데이터를 추가하고, 이 데이터는 JSP에서 EL 표현식을 통해 사용할 수 있습니다.




1. 클라이언트가 웹 서버에 접속하면, 가장 먼저 어떤 파일을 호출하게 될까요?
   a. index.html
   b. web.xml
   c. dispatcher-servlet.xml
   d. controller.java

2. 스프링에서 컨트롤러의 메서드에 @RequestMapping 어노테이션이 사용되는 이유는 무엇인가요?
   a. 클라이언트의 요청을 해당 메서드와 매핑하기 위해
   b. 메서드의 실행 결과를 클라이언트에 반환하기 위해
   c. 메서드에 필요한 인자 값을 전달하기 위해
   d. 메서드의 실행을 특정 조건에 제한하기 위해

3. @RequestParam 어노테이션은 어떤 역할을 하는가요?
   a. 클라이언트의 요청 파라미터 값을 받기 위해
   b. 모델에 데이터를 추가하기 위해
   c. 뷰로 데이터를 전달하기 위해
   d. 예외 처리를 위한 파라미터를 정의하기 위해

4. 스프링에서 Model 객체를 사용하는 목적은 무엇인가요?
   a. 데이터를 컨트롤러에서 뷰로 전달하기 위해
   b. 데이터를 컨트롤러에서 서비스로 전달하기 위해
   c. 데이터를 컨트롤러에서 데이터베이스로 전달하기 위해
   d. 데이터를 컨트롤러에서 다른 컨트롤러로 전달하기 위해

5. 스프링에서 사용되는 JSP 파일은 어디에 위치해야 하나요?
   a. WEB-INF 폴더 내에 있어야 합니다.
   b. resources 폴더 내에 있어야 합니다.
   c. static 폴더 내에 있어야 합니다.
   d. templates 폴더 내에 있어야 합니다.

6. 스프링에서 사용되는 XML 파일 중 컨트롤러와 매핑되는 파일은 무엇인가요?
   a. web.xml
   b. dispatcher-servlet.xml
   c. applicationContext.xml
   d. applicationContext-security.xml

7. 스프링에서 사용되는 어노테이션 중 컨트롤러를 선언하기 위해 사용되는 어노테이션은 무엇인가요?
   a. @Controller
   b. @Service
   c. @Repository
   d. @Component

8. 스프링에서 인자로 전달되는 값을 기본값으로 설정하려면 어떤 어노테이션을 사용해야 하나요?
   a. @PathVariable
   b. @ModelAttribute
   c. @RequestParam
   d. @Value


9. 스프링에서 인자로 전달되는 값을 객체로 받기 위해 사용되는 어노테이션은 무엇인가요?
    a. @PathVariable
    b. @ModelAttribute
    c. @RequestParam
    d. @Value

10. 스프링에서 사용되는 어노테이션 중 클라이언트의 요청을 처리하기 위해 사용되는 어노테이션은 무엇인가요?
    a. @Controller
    b. @Service
    c. @Repository
    d. @Component


1. a. index.html
   - 클라이언트가 웹 서버에 접속하면 가장 먼저 index.html 파일이 호출됩니다. 이 파일은 웹 애플리케이션의 기본 페이지로 설정되어 있습니다.

2. a. 클라이언트의 요청을 해당 메서드와 매핑하기 위해
   - @RequestMapping 어노테이션은 컨트롤러의 메서드와 클라이언트의 요청을 매핑하기 위해 사용됩니다. 어노테이션에 지정된 URL 패턴과 일치하는 요청이 들어오면 해당 메서드가 실행됩니다.

3. a. 클라이언트의 요청 파라미터 값을 받기 위해
   - @RequestParam 어노테이션은 클라이언트의 요청 파라미터 값을 컨트롤러의 메서드 인자로 받기 위해 사용됩니다. 어노테이션에 지정된 파라미터 이름과 일치하는 요청 파라미터 값을 해당 메서드의 인자로 전달합니다.

4. a. 데이터를 컨트롤러에서 뷰로 전달하기 위해
   - Model 객체는 컨트롤러에서 뷰로 데이터를 전달하기 위해 사용됩니다. 컨트롤러에서 처리한 데이터를 Model 객체에 추가하면 해당 데이터는 뷰로 전달되어 화면에 표시됩니다.

5. a. WEB-INF 폴더 내에 있어야 합니다.
   - 스프링에서는 JSP 파일을 WEB-INF 폴더 내에 위치시킵니다. 이렇게 함으로써 외부에서 직접적으로 접근할 수 없도록 보안성을 높이는 효과가 있습니다.

6. b. dispatcher-servlet.xml
   - 스프링에서 컨트롤러와 매핑되는 XML 파일은 dispatcher-servlet.xml입니다. 이 파일에는 스프링의 DispatcherServlet과 관련된 설정 정보가 포함되어 있습니다.

7. a. @Controller
   - 컨트롤러를 선언하기 위해 @Controller 어노테이션을 사용합니다. 이 어노테이션은 해당 클래스가 컨트롤러 역할을 수행하는 클래스임을 나타냅니다.

8. c. @RequestParam
   - 기본값으로 설정하기 위해 @RequestParam 어노테이션을 사용합니다. 어노테이션의 defaultValue 속성을 사용하여 기본값을 지정할 수 있습니다.


9. b. @ModelAttribute
    - 인자로 전달되는 값을 객체로 받기 위해 @ModelAttribute 어노테이션을 사용합니다. 어노테이션을 사용하면 자동으로 객체가 생성되고 요청 파라미터의 값을 해당 객체의 필드에 바인딩합니다.

10. a. @Controller
    - 클라이언트의 요청을 처리하기 위해 @Controller 어노테이션을 사용합니다. 해당 어노테이션이 지정된 클래스는 컨트롤러로 동작하며, 클라이언트의 요청에 대한 처리를 담당합니다.

 


   