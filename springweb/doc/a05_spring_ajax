# 스프링에서 여러가지 ajax 처리
1. 스프링은 여러가지 형식의 ajax 처리를 할 수 있다.
2. jquery나 vue, react등 여러가지 front단에서 요청한 ajax를
	backend에서 json데이터를 효율적으로 처리하고 있다.
3. 스프링 ajax 처리 기본 형태
	1) container에 json viewer를 처리를 할 수 있게 처리
		자바의 객체 ==> json형식의 객체
	2) ajax 요청 및 모델 데이터를 호출하여
	3) return "json뷰어"를 통해 ajax 데이터를 가져올 수 있다.
4. 개발 순서
	1) 초기화면 로딩
		ctrl ==> view(jsp)
	2) json데이터를 처리한 controller 기능메서드 선언
		dao ==> service ==> controller(json데이터로 처리)	
	3) 이벤트에 의해 ajax처리
		jquery ajax 처리..	
		
# 직책등록(실무예제 처리)-ajax
1. 프로세스
	1) 등록창 버튼 클릭시, 등록 모달창 로딩
	2) 필요한 데이터를 항목별로 등록하고, 등록 버튼 클릭
	3) 등록완료가 뜨고 계속 등록여부 확인
2. 개발 진행
	1) 등록 dao 처리(sql과 dao 인터페이스 메서드 선언)
		INSERT INTO jobs01 values(#{job_id},#{job_title},
			#{min_salary},#{max_salary})
		public void insertJob(Job ins);	
	2) 서비스단 호출
	3) controller단 등록 url와 함께 처리 및 서비스단 호출
		ajax처리 리턴값으로 성공여부 전달
	4) 화면단 구성 a07_ajaxList.jsp
		모달창 div위치, 모달창 로딩 코드 위치..
		
		- 등록창 클릭시, 모달 창 처리
		- 모달창 항목에 등록 내용 입력
		- 등록 버튼 클릭시, ajax로 입력된 내용 controller단 호출
ex) 연습예제 지역리스트 및 등록 처리
1. DB 처리
	1) sql
		SELECT * 
		FROM regions01
		WHERE REGION_NAME LIKE '%'||''||'%'
		;
		INSERT INTO regions01 values(5,'서울');
	2) dao;
		VO
		class Region{
			private int region_id; 
			private String region_name;  
		}
		A07_RegDao.java
		@Select("SELECT * 
				FROM regions01
				WHERE REGION_NAME LIKE '%'||#{region_name}||'%'")
		public List<Region> regionList(@Param("region_name)
			String region_name);
		@Insert("INSERT INTO regions01 values(
				#{region_id},#{region_name})")
		public int insertRegion(Region insert);			 
		
		
	3) service
		A07_RegService.java
-------------------------------------------------		
	4) Controller
		A07_RegCtrl.java
		- ajax data url
			/regData.do  json데이터 리스트 처리
			/regInsert.do 등록성공 출력..
	참고..
	@Autowired
	private A07_RegService service;
	// regData.do
	@RequestMapping("regData.do")
	public ResponseEntity<List<Region>> jobList(
		@RequestParam("region_name") String region_name){
		return ResponseEntity.ok(
			service.regionList(region_name));
	}		
	// regInsert.do?region_id=5&region_name=부산
	@RequestMapping("regInsert.do")
	public ResponseEntity<String> regInsert(Region ins){
		return ResponseEntity.ok(service.insertRegion(ins));
	}
--------------------------------------------------					
		- 초기화면
			/regList.do

2. 화면처리(views\a05_mvcexp\a09_regList.jsp)
	1)	등록리스트 조회 ajax 출력 만들기.
		$(document).ready(function(){
			search()
		})
		function search(){
			$.ajax({
				url:"regList.do",
				success:function(regList){
					var add=""
					regList.forEach(function(reg){
						add+="<tr><td>"+region_id+"</td>"
						add+="<td>"+region_name+"</td></tr>"
						
					})
					$("tbody").html(add);
				}
			})
		}
		-------------------------------------------
	2) 등록 버튼 추가 
		클릭시, 모달창 로딩.
	3) 등록 입력 값 처리ㅣ..
		등록 타이틀 
		입력 form 설정
		name="region_id" name="region_name"
		등록 버튼 클릭 이벤트 핸들러 처리
		등록 ajax 호출
		$.ajax({
			url:"${path}/regInsert.do"
		})
		<form id="regFrm">
			<input name="region_id" 
			<input name="region_name"
		<button id="regBtn">
		참고..
    		$("#regBtn").click(function(){
    			if(confirm("지역정보를 등록하겠습니까?")){
    				$.ajax({
    					url:"${path}/regInsert.do",
    					type:"post",
    					data:$("#regFrm").serialize(),
    					dataType:"text",
    					success:function(data){
    						// 등록후 반영된 내용을 리스트하게
    						search();
    						// 폼에 있는 등록시 입력된 내용을 초기화할 때,
    						// 처리하는 form하위 요소객체 초기화
    						$("#regFrm")[0].reset();
    						if(!confirm(data.replaceAll("\"", "")+"\n계속 등록하시겠습니까?")){
    							// 창을 닫게 처리 : 이벤트 강제 처리
    							$("#clsBtn").click();
    						}
    					},
    					error:function(err){
    						console.log(err)
    					}
    				})		
		
# 직책관리 상세화면에서 수정/삭제
1. 프로세스
	1) 직책관리리스트에서 특정 직책을 row단위로 클릭하면
	2) 모달창으로 직책정보를 변경할 수 있는 창이 로딩된다.
	3) 수정시, 수정이 되었습니다. 창을 닫으시겠습니까? 확인 처리
	4) 삭제시, 삭제되었습니다. 창이 닫기면 삭제된 리스트를 확인
2. 개발순서
	1) Dao 작성
		sql
		(상세) select * from jobs01 where job_id=#{job_id}
		(수정) update jobs01
				set job_title=#{job_title},
					min_salary=#{min_salary},	
					max_salary=#{max_salary}
				where job_id=#{job_id}
		(삭제) delete 
		      from jobs01
		      where job_id=#{job_id}				
		메서드
		public Job getJob(@Param("job_id") String job_id);
		public int updateJob(Job upt);
		public int deleteJob(@Param("job_id") String job_id);
	2) Service
		public Job getJob(String job_id){
			return dao.getJob(job_id);
		}				
		public String updateJob(Job upt){
			return dao.updateJob(upt)>0?"수정성공":"수정되지않음";
		}
		public String deleteJob(String job_id){
			return dao.deleteJob(job_id)>0?"삭제성공":"수정되지않음";
		}
	--------------------------------
	3) Controller
		/getJob.do
		/updateJob.do
		/deleteJob.do
								
		
				
		 			
			
		
		
		
		
						
	
	
				
		
	
	
		