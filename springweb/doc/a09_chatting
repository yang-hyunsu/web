# 웹소켓을 통한 실시간 채팅
1. 웹환경에서 사용자간에 실시간 채팅을 여러 기능적인 필요로 할 때가 
	많다. 실시간 채팅은 기본 웹 개발에서 추가적으로 chatting 모듈이
	탑재가 되어 처리되는 부분으로 스프링에서 이에 대한 lib를 지원하고 있다.
2. 주요 프로세스
	1) 로그인/일반사용자가 채팅화면을 클릭하고, 입장을 클릭시, 화면에
		입장이 된다.
	2) 사용자 인터페이스에 따라, 채팅방을 설정할 수도 있다.
	3) 채팅방에 입장하면 여러 입장한 사용자로 하여금 메시지를 전송하거나
		전달 받을 수 있다.
	4) 종료 클릭시, 채팅방에서 나와서 다른 채팅방에 가거나 다른 업무를
		처리할 수 있다.
3. 개발 순서
	1) 컨테이너에 웹 chatting 소켓 설정.
	2) [backend]java로 chatting handler 클래스 선언
		- 클라이언트에 의해서 접속/메시지전송/종료에 대한 내용을
			처리해주는 내용이다.
		- 각 상속한 클래스에서 제공하는 메서드에 의해서
			정보들을 처리한다.
		- 전역변수로 접속한 사용자의 socket session을 누적해서
			저장한다.
	3) [frontend] 
		- chatting 화면 ui 구성(기본구성)
			입장하는 사용자입력, 입장버튼, 메시지입력/메시지 전송버튼,
			메시지 내용 창, 퇴장버튼
		- 입장버튼 클릭시, js로 websocket 객체 생성 처리.
		- socket서버에서 오는 push메시지로 메시지가 올 때마다,
			메시지 화면처리
		- 메시지 입력 후, 전송 버튼시, 해당 메시지를 서버로 전송
		- 종료버튼 클릭시, 서버와 연결을 종료 처리된다.
# 채팅사용자 확인 처리..
1. 입력한 채팅자 동일 등록 확인 및 사용자 확인 처리..
2. 처리 내용
	1) 등록 사용자 리스트를 따로 group 관리하여 처리한다.
	2) 현재 접속자를 확인하여, 해당 내용을 통해서 접속자 아이디에
		영향을 미쳐서 처리한다.
	3) 접속했을 때, 현재 접속한 등록자들 리스트를 확인할 수 있다.
	4) 접속자 아이디 입력 후, 접속시, 유효성으로 아이디 글자수와
		동일 아이디를 확인하여 접속을 하게 한다.
3. 처리 순서
	1) 서버단 핸들러 처리
		- 서버단에 접속자의 아이디와 고유 아이디를 map형식으로 저장한다.
			- 접속 종료시는 제외 처리..
		- controller에서 호출시, 해당 접속자를 리턴할 수 있는
			메서드 구현..
	2) controller(ajax로 처리해서 확인하기 위해)
		- 핸들러에서 접속한 아이디를 List로 가져오게 처리한다.
	3) 화면단 처리
		- 접속자 리스트 나올 수 있는 항목 추가..
		- 초기 항목에 항당 list를 ajax로 가져오게 처리..
		
							
		
		
		
		
		
		
		
		
		
		
		
		