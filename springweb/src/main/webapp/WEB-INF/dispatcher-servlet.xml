<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:task="http://www.springframework.org/schema/task" 
   xmlns:aop="http://www.springframework.org/schema/aop" 
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:p="http://www.springframework.org/schema/p"
   xmlns:c="http://www.springframework.org/schema/c"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:util="http://www.springframework.org/schema/util"
   xmlns:websocket="http://www.springframework.org/schema/websocket"
   xmlns:sec="http://www.springframework.org/schema/security"
   xmlns:tx="http://www.springframework.org/schema/tx" 
    
   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd       
        http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc.xsd     
        http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
         http://www.springframework.org/schema/websocket
      http://www.springframework.org/schema/websocket/spring-websocket.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd   
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd   
      ">
    <!-- 
    @Controller/@Service/@Repository 클래스 ==> 객체
    A04_PreparedDao ==> 클래스
    컨테이너(메모리 수영장)
    empList01.do 위 객체들의 메서드 중에 찾기 시작.
    
     -->  
	<context:component-scan base-package="springweb">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	</context:component-scan>
	 
	<context:property-placeholder location="classpath:resource/a01_config,classpath:resource/a02_config"/>
	
	<!-- 
	<context:property-placeholder location="classpath:resource/a01_config"/>
	<context:property-placeholder location="classpath:resource/a02_config"/>
	 -->
	<!-- container안에서도 접근, java소스로도 접근 가능..key/val -->
	
	
	<bean class="backendWeb.a01_dao.A04_PreparedDao"/>
	<!-- 
	# DB연결처리
	1. DBCP(Database Connection Pool)을 이용해서 DB연결 처리..
		destroy-method="close" 종료시 bean객체에서 사용하는
		메서드 정의
	 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" 
			value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="scott"/>	
		<property name="password" value="tiger"/>	
	
	</bean> 
	<!-- 
oracle.jdbc.driver.OracleDriver	
jdbc:oracle:thin:@localhost:1521:xe
	
	# mybatis연동처리..
	1. 위 연결 정보 설정
	2. mybatis 공통 xml 연동 처리
	3. mybatis를 통해 만들어질 실제 객체가 바라보는 
		dao interface 위치 설정
		1) 여러 패키지에 있는 dao를 호출할려면 아래와 같이 설정한다.
			value = "패키지1명;패키지2명"
	 -->
	<bean id="sqlSessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" 
			value="classpath:resource/mybatis.Spring.xml"/>	
	</bean> 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" 
			value="springweb.a05_mvcexp.a03_dao"/>
	</bean>
	<!-- 
	# jsp뷰가 default인데, 이 뷰뿐만 아니라 선언된 뷰를 사용할려면
	두가지 뷰가 특정 규칙에 의해서 우선 순위가 설정이 되어야 한다. 
	1. 우선 jsp뷰를 제외한 bean으로 선언할 뷰
	2. 두번째 우선순위로 jsp뷰 선언..
	
	ex) 파랑구슬(2), 빨강구슬(8)
	 -->
	<bean id="btnViewResolver" 
	class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0"/>
	</bean>
	
	
	
	
	<!-- 추가되는 뷰가 적기 때문에 우선순위를 지정.
	 
	return "파일업로드 view" ==> container에서 명시적으로 선언하여
		처리하는 뷰
	-->
	<!-- 파일업로드 뷰 추가.. 
	컨트롤러에 요청값으로 MultiPartFile이 파일업로드 객체로 사용할 수 있게 해준다-->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

	
		
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="order" value="1"/>
	</bean>	 
	<!-- 그 외는 화면을 처리하는 viewer(jsp)로 우선순위를 뒤로 지정 
	
	return "WEB-INF\\views\\a02_emp\\a02_emp_datail.jsp";
	-->
	 
	
</beans>   


   
