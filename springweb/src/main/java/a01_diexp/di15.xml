<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:task="http://www.springframework.org/schema/task" 
   xmlns:aop="http://www.springframework.org/schema/aop" 
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:p="http://www.springframework.org/schema/p"
   xmlns:c="http://www.springframework.org/schema/c"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:util="http://www.springframework.org/schema/util"
   xmlns:websocket="http://www.springframework.org/schema/websocket"
   xmlns:sec="http://www.springframework.org/schema/security"
   xmlns:tx="http://www.springframework.org/schema/tx" 
    
   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd       
        http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc.xsd     
        http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
         http://www.springframework.org/schema/websocket
      http://www.springframework.org/schema/websocket/spring-websocket.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd   
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd   
      ">
	<bean id="obj" class="java.lang.Object"/>
	<!-- 
# namespace를 이용한 객체 생성과 property 사용
1. 위에 선언한 dtd(xml 상단에 사용할 태그와 속성 규칙)에
   xmlns:p="http://www.springframework.org/schema/p"
   xmlns:c="http://www.springframework.org/schema/c"
	가 선언되어 있으면 객체 생성과 선언방식을 보다 간단하게 처리할 수 있다.
2. p : property 선언
   c : constructor 선언
3. property선언 방식
	1) p:프로퍼티명="값설정"
4. constructor 선언 방식
	1) c:매개변수명="할당할데이터"
	2) c:_0 : 생성자 선언 순서
       c:_1="20"  생성자 두번째에 20을 매개변수로 선언해서 할당 처리..
	 -->
	<bean id="p01" class="backendWeb.z01_vo.Person"
		p:name="홍길동" p:age="25" p:loc="서울" />
	<bean id="prod1" class="backendWeb.z01_vo.Product"
		c:name="사과" c:price="3000" c:cnt="2" />
	<bean id="prod2" class="backendWeb.z01_vo.Product"
		c:_0="바나나" c:_1="4000" c:_2="5" />
	<!-- 
		Person p01 = ctx.getBean("p01", Person.class);
		Product prod1 = ctx.getBean("prod1", Product.class);
		Product prod2 = ctx.getBean("prod2", Product.class);
		System.out.println(p01.getName());
		System.out.println(prod1.getName());
		System.out.println(prod2.getName());	
	ex) Dept : 프로퍼티로 선언
	    Calculator : 생성자(1,2)로 선언해서 호출
	    해서 출력하세요..
	 -->	
	 <bean id="d01" class="backendWeb.z01_vo.Dept"
	 	p:deptno="50" p:dname="인사" p:loc="광주"	
	 />
	 <!-- 
	 Dept d01 = new Dept();
	 d01.setDeptno(50) 
	 Calculator(int num01, int num02, String cal, int tot)
	  -->
	<bean id="cal01" class="backendWeb.z01_vo.Calculator"
		c:num01="10" c:num02="20" c:cal="*" c:tot="200" />
	<bean id="cal02" class="backendWeb.z01_vo.Calculator"
		c:_0="10" c:_1="5" c:_2="+" c:_3="15" />
<!-- 
		// ex) Music  m01, m02, m03
		//         프로퍼터  생성자1  생성자2 방식으로
		//      xml 선언 후, 호출..
		Music(String mname, String singer, int pubyear)
 -->	
 	<bean id="m01" class="backendWeb.z01_vo.Music" 
 		p:mname="Super Shy" p:singer="NewJeans" p:pubyear="2023" />
 	<bean id="m02" class="backendWeb.z01_vo.Music" 
 		c:mname="퀀카" c:singer="여자아이들" c:pubyear="2023" />
  	<bean id="m03" class="backendWeb.z01_vo.Music" 
 		c:_0="I AM" c:_1="IVE" c:_2="2022" />
 		
  		
 				
		
		 		 
	
	      
</beans>   


   
