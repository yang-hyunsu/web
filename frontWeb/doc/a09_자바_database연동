# java를 통한 데이터베이스 서버연결
1. 소프트웨어를 사용하는 사용자에 의해 입력된 데이터는
필요에 따라 DB서버라는 고정적이고 지속적인 저장장치에 저장되었다가
필요에 따라 활용하여 내가 원하는 정보를 가져올 수 있다.
2. 이 때, 사용자와 서버사이에 보다 효율적인 사용자정의 인터페이스가
있다면 원하는 정보를 빠르게 로딩할 수 있다.
3. 이와같이 데이터베이스 서버에서 소트프웨어(자바)에 의해 DB 접속과
기는에 따라 조회, 등록, 수정, 삭제등을 하는 작업은 중요한 개발 작업중에
하나이다.
4. DB 연결를 위한 진행 단계
	1) 개발 환경
		- jdbc 드라이버 확보
			DB연결을 위해 공통적인 부분을 드라이버 jar로 클래스로 만들어
			서 처리
			코드(jdbc드라이버)이외에 개발자가 반드시 코딩.
			C:\oraclexe\app\oracle\product\11.2.0\
				server\jdbc\lib\ojdbc6.jar
			- eclipse에서 해당 lib을 실행식 인식할 수 있게
				설정..	
		- oracle db서버 설치
			서버 정보
			host(ip) : localhost(서버를 현재 같은 컴퓨터에서 호출시)
			port : 1521 
			database : xe - 데이터베이스 서버단위 식별자
			username : scott
			password : tiger
			
	2) java 코드 처리 단계(ps. 휴대폰에 타인과 대화를 생각)
		아래단계는 위단계를 처리한 기반으로 하위 내용을 처리한다.
		- jdbc 메모리 로딩하기 - 기지국(핸드폰 사용을 위한)
			ex) 기지국(jdbc)과 핸드폰사용(java.sql.*)
			ex) 로봇(jdbc)과 로봇제어장치(java.sql.*)
			Class.forName() : ClassNotFoundException
		- 예외 처리(연결객체 예외처리 - SQLException)
		- 연결자원(객체) 설정 - 전화번호를 입력해서 연결 - 서버정보를 입력
			                해서 특정 서버에 연결
			   네트워트망의 ip ==> 특정 컴퓨터 ==> 그중에서
			   오라클 서비스 지원 port ==> 여러개의 DB 중에
			   선택된 DB(sid-XE) ==> 인증(계정/비번)
		- 대화객체 설정 - 말을 하기도 하고, 전달 받기도 하고(SQL)
			insert, update, delete ==> 서버에 전달만
		- 대화의 결과를 가져오는 객체 설정
			select ==> 명령/데이터 전달 ==> 답을 가져오기도 한다.
			Resultset(행열된 2차원 데이터)
		- 대화객체의 내용을 VO객체에 할당 및 리턴
			ResultSet ==> VO
			VO로 전환해야지 객체안에 기능에 따라 다양한 처리를 효율적으로
			하지 때문이다.
		- 자원해제
			생성된 역순위로 자원해제 close() 	
		- 기타예외 처리.
			try{
				DB 처리
				자원해제
			}catch(SQLException){
				예외 처리
				
			}catch(Exception){
				기타 예외
			}finally(){
				남아 있는 자원이 있으면
				다시 해제 처리
			}
			==> 공통 자원해제 관련 클래스 만들기..
	3) 자바에서 DB 접속을 위한 핵심 내장 객체
		- java.sql.* ==> import java.sql.*;
		- Connection : 연결객체
		- Statement : 대화객체
			PreparedStatement : 준비된 대화 객체
			- 보안(SQLInjection)과 속도..
		- ResultSet : 서버에서 온 데이터를 저장	
		
		# 모든 객체 메모리 할당관계는 순차별로 처리한다.
		jdbc(클래스) =(Class.forName())
		=> 메모리 객체로 생성(DriverManager)
		==> Connection 객체 생성 ==> Statement 객체 ==> ResultSet
# sql을 통해서 실제 데이터 가져오기
1. 전체데이터 로딩해서 출력
   while(rs.next()) - row단위가 여러개 있을 때.	
	1) 데이터 로딩 출력	
   if(rs.next()) - 한개의 row 	
2. select 문 사용의 편의성에 의해서 처리된 데이터 VO객체에 담기
   (조건문 매개변수 활용)
	0) 매개변수에 의해 조건문으로 데이터 처리하기
		- 1개	ex) getEmp(int empno)
					sql="select * from emp where empno="+empno
		- 여러개  ex) getEmpList(String ename, String job)
		            sql="... ename like '%||'"+ename+"' ||%'
		            sql+="... job like '%||'"+job+"' ||%'
		- map   ex) getEmpList(Map<String,String> map)
		            sql="... ename like '%||'"+map.get("ename")+"' ||%'
		            sql+="... job like '%||'"+map.get("job")+"' ||%'
		- 객체   ex) getEmpList(Emp emp)
		            sql="... ename like '%||'"+emp.getEname()+"' ||%'
		            sql+="... job like '%||'"+emp.getJob()+"' ||%'
		        일반적을 sql문을 select하는 내용과 where 조건에 
		        사용하는 내용이 같기에 select에서 사용하는 VO을 조건문에서
		        사용하는 경우가 많다. ==> 조건 생성자만 처리하며 된다.
		        ex) public Emp(String ename, String job){}    
		- 배열   ex) getEmpList(String[] sch)
		            sql="... ename like '%||'"+sch[0]+"' ||%'
		            sql+="... job like '%||'"+sch[1]+"' ||%'
		
	# 리턴값에 대한 처리.
	1) 한개의 데이터로 담기(row 1개, col 1개)
		특정한 결과가 1개의 유형의 데이터 일때
		ex) 사원번호 7780의 급여
		ex) 사원번호 7780의 사원명
		-- 입력값 1, 사용할 값이 1개..
		SELECT sal
		FROM EMP02 e
		WHERE empno = 7499;
		-- 해당 부서의 사원수
		SELECT count(*) cnt -- 그룹함수로 데이터의 건수.
		FROM emp02
		WHERE deptno = 10;				
	2) 한 개의 VO에 담기(row:1, col:다수)
		ex) 사원번호 7780의 전체 컬럼 내용
		col의 이름과 데이터유형에 따라서 VO(value object) 클래스를
		선언하여 활용한다.
		
			
	3) 여러 개의 List<VO>
		List<VO> list = new ArrayList<VO>();
		list.get(0) : 단위 객체
		list.size() : 크기
		for(Vo vo : list){
		}
	4) sql inject에 대비한 PreparedStatement 객체
		전역변수 선언
		PreparedStatement pstmt;
		
3. 여러가지 sql 활용 패턴
	1) select : 여러가지 sql 구분을 통해서 처리하는 내용
	2) insert :
	 	    모든 데이터 입력 
				insert into 테이블명 values(데이터1, 데이터2...)
			특정 컬럼 데이터 입력
				insert into 테이블명(컬럼1명, 컬럼2명) values(..)	
	3) update :			
	4) delete	

	
# 매개변수에 의해 데이터를 조회하는 처리
1. sql 확인/전달할 데이터 식별
	SELECT * 
	FROM EMP02
	WHERE ename LIKE '%'||'B'||'%'
	;
	--  1. 입력값에 따라서 검색되는 데이터가 다른 처리.
	--  2. 매개변수 : 사원명(ename)
2. 메서드 선언 및 매개변수 처리
	매개변수 : 사원명(ename)
3. DB 조회 처리 및 수행 내용 확인

# 매개변수하나로 여러개의 열의 데이터 처리하기
1. 사원번호로 사원전체 정보를 가져와서 사용하는 경우
2. sql 확인
	select *
	from emp02
	where empno = 7499
	;
3. 단일 열데이터를 확인하고, 여기에 맞는 property명과
	생성자로 된 클래스 선언
	class Emp{
		private int empno;
		private String ename;
		
	}
4. DB 메서드 선언
	public Emp getEmp(int empno){
		Emp emp=null;
		
		return emp;
	}		
5. DB 메서드 데이터 처리
	if(rs.next){
		emp = new Emp(
			rs.getInt("empno"),
			rs.getString("ename"),
			rs.getString("job"),
			rs.getInt("mgr"),
			rs.getDate("hiredate"),
			rs.getDate("comm"),
			rs.getDate("dept")
		);
	}
6. 메서드 호출 확인
	Emp show = dao.getEmp(7499);
	
# 여러개의 매개변수로 여러개의 열의 데이터를 포함한 여러개의 행처리하기
1. 직책과 사원명을 keyword 검색해서 and 조건으로 가져오는 처리..
2. sql 확인
	select *
	from emp02
	where job like '%'||''||'%'
	and ename like '%'||''||'%'
	;
3. 조회 조건 입력 VO객체 확인
	  메서드의 매개변수(,) 2개정도
	  메서드의 매개변수(객체 ) 3개이상
	  메서드의 매개변수(map ) 3개이상
   리스트할 단위 데이터의 VO객체를 확인 ==> List<VO>

	단일 열데이터를 확인하고, 여기에 맞는 property명과
	생성자로 된 클래스 선언
	class Emp{
		private int empno;
		private String ename;
		...,
		
	}
4. DB 메서드 선언(입력값은 VO, 리턴한 내용 List<VO>
	public List<Emp> getEmpList(Emp sch){
		List<Emp> empList = new ArrayList<Emp>();
		String sql = "sql문"

		
		return empList;
	}	
	-- pstmt의 경우
	pstmt = con.prepareStatement(sql)
	pstmt.set데이터유형(순서, 해당데이터)
	pstmt.set데이터유형(순서, 해당데이터)
	pstmt.set데이터유형(순서, 해당데이터)
	pstmt.set데이터유형(순서, 해당데이터)
	
	
		
5. DB 메서드 데이터 처리
	while(rs.next){
		Emp emp = new Emp(
			rs.getInt("empno"),
			rs.getString("ename"),
			rs.getString("job"),
			rs.getInt("mgr"),
			rs.getDate("hiredate"),
			rs.getDouble("sal"),
			rs.getDate("comm"),
			rs.getInt("deptno")
		);
		empList.add(emp); // List<Emp>에 계속 추가 처리.
	}
6. 메인에서 메서드 호출 확인
	List<Emp> eList = dao.getEmpList(new Emp("",""));
	for(Emp emp:eList){
		// 단위 데이터 출력..
		emp.getEmpno();
		emp.getEname();
		emp.getEJob();
		..
		..
		
	}
# PreparedStatement 객체 사용
1. 기존 Statement를 대체하여 PreparedStatement를 처리하는 방식을 말한다.
2. 왜??
	1) SQL Injection의 방지
		로그인
		id [' or 1=1--]
		pass [7777]
		[로그인]
		
		select *
		from member
		where id = '' or 1=1--'and pass = '777'
		==>
		select *
		where id = ?
		and pass = ?
	
		PreparedStatement를 이용할 sql 처리.
		sql부터 서버에 전송을 하고,
		매개변수로 들어올 수 있는 값을 데이터유형에 맞게 
		전송
		setString(1, @@@)
		setInt(2, @@@)
		
		
		
		
	2) DB Server내 컴파일 속도를 향상
		DB 서버 처리 속성
		16:50 sql select * from emp 
				해석 == 실행
		16:51 sql select * from emp
				이전 실행된걸 바로 실행
		16:52 sql select * from emp where ename = '홍길동'
				해석 == 실행
		# PreparedStement를 쓰지 않을 때			
		16:50 sql select * from emp where ename = '마길동
				해석 == 실행
		16:51 sql select * from emp where ename = '하길동
				해석 == 실행
		16:52 sql select * from emp where ename = '오길동'
				해석 == 실행						
		# PreparedStement를 쓸떄		
		16:50 sql select * from emp where ename = ?
				해석 == 실행
		16:51 sql select * from emp where ename = ?
				바로 실행
				뒤에 매개변수를 전달
		16:52 sql select * from emp where ename = ?
				바로 실행
				뒤에 매개변수를 전달	
		17:05~								
		
# DB 처리 코드상 핵심 부분.
1. 대부분은 copy 사용하여 처리한다.
2. sql문 작성 : select 순서와 컬럼명  where 조건문 처리
	select * ==> table 만들어 컬럼순서
	select ename name, job
3. ResultSet 객체를 통해 받은 데이터
	1) row 1개
		public 객체명....
			객체명 = null;
			변수명 = 0;
		if(rs.next) 
			참조 = new 생성자(rs.getXXX(),...) 
			rs.get타입("name") 또는 rs.getString(1)
				*** name : 절대 테이블 고유 컬럼명이 아니고, 
					sql에 의해 처리된 상단의 컬럼명임..
			rs.getString(2)
	2) row 다수
		public List<VO>
			List<VO> list = new ArrayList<VO>();
		while(rs.next)		
			list.add(new VO(rs.getXXX(1),...));
# 등록/수정/삭제 처리 순서
1. sql 확인
	INSERT INTO emp02 values(1003,'하기동','대리',7902,
			to_date('2023-05-01','YYYY-MM-DD'), 4500,1000,20);
	문자열로 작성할 sql
	INSERT INTO emp02 values(?,?,?,?,to_date(?,'YYYY-MM-DD'), ?,?,?)	
2. VO객체 만들기  
	입력 VO/Map/배열
	class Emp // 입력할 VO
		private int empno;
		private String ename;
		private String job;
		private int mgr;
		private String hiredateS; // 추가 처리해서
		private double sal;
		private double comm;
		private int deptno
		생성자 만들기
		get/set메서드 만들기.
3. 메서드 선언(매개변수, 리턴타입, 메서드명, sql)
	public void insertEmp(Emp ins){
		String sql = "";
		1. DB연결
			자동 autoCommit방지
		2. PreparedStatement객체 생성
		3. pstmt.setXXX(1,...)
		4. 수행처리(등록/수정/삭제)
			pstmt.executeUpdate()
		5. 확정 commit()
		6. 예외발생시 rollback처리		
	}		
4. main()에서 확인..


# 실무적용
1. 요구사항정의 
	ex) 아이디와 패스워드를 입력해서 로그인 성공 여부처리
		아이디/패스워드/이름
		성공시 @@님 로그인 성공
		실패시 아이디는 인증된 계정이 아닙니다.
	ex) 회원가입
		아이디, 패스워스/패스워드확인, 이름, 권한, 포인트, (오늘날짜)
		로 가입 처리
			
		
2. ERD
	회원테이블
	아이디
	패스워드
	이름
3. 물리 설계 내용을 바탕으로 DB sql 테이블 생성 script로 테이블 생성
	create table member20{
		id varchar2(50) primary key,
		pass varchar2(50),
		name varchar2(50)
	}
4. 샘플 데이터 입력
	insert into member20 values('himan','7777','홍길동');
	# 회원가입
	insert into member20 values('higirl','8888',
	    '홍리나',1000,'관리자',sysdate);
	    
	
5. 업무 내용에 맞게 Dao 처리
	sql 
	insert into member20 values(?,?,?,?,?,sysdate)		
	VO
		날짜이외 생성자 추가..
	메서드처리
		- 데이터베이스 처리(연결,대화,결과)
	class MemberDao{
		public Member login(String id, String pass){
			Member m=null;
			
			return m;
		}
		public void insertMember(Member m){
			int isInsert = 0;
			String sql = "insert into member20 values(?,?,?,?,?,sysdate)	";
			
		}
	}
	
	class ShoppingMall{
		private MemberDao dao;
		ShoppingMall(){
			dao = new MemberDao();
		}
		public void registerMemberMenu(){
		
		}
		void loginMenu(){ // 로그인 메뉴 처리
			로그인 합니다. scanner 입력 처리.
			인증 될 때까지 처리할려면 while(true)로 처리
			아이디를 입력
			패스워드를 이력
			Member m = dao.login(id,pass);
			if(m==null){
				로그인 실패
			}else{
				m.getName() 님 로그인 성공하였습니다.
			}
		}
		// 회원가입 메뉴 메서드
		
		// 회원관리 메뉴 메서드
		
		
		public static void main(String args[]){
			ShoppingMall sh = new ShoppingMall()
			sh.loginMenu();
		}
	}
	
	


	







		
		
		
			