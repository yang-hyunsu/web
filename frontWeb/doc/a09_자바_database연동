# java를 통한 데이터베이스 서버연결
1. 소프트웨어를 사용하는 사용자에 의해 입력된 데이터는
필요에 따라 DB서버라는 고정적이고 지속적인 저장장치에 저장되었다가
필요에 따라 활용하여 내가 원하는 정보를 가져올 수 있다.
2. 이 때, 사용자와 서버사이에 보다 효율적인 사용자정의 인터페이스가
있다면 원하는 정보를 빠르게 로딩할 수 있다.
3. 이와같이 데이터베이스 서버에서 소트프웨어(자바)에 의해 DB 접속과
기는에 따라 조회, 등록, 수정, 삭제등을 하는 작업은 중요한 개발 작업중에
하나이다.
4. DB 연결를 위한 진행 단계
	1) 개발 환경
		- jdbc 드라이버 확보
			DB연결을 위해 공통적인 부분을 드라이버 jar로 클래스로 만들어
			서 처리
			코드(jdbc드라이버)이외에 개발자가 반드시 코딩.
			C:\oraclexe\app\oracle\product\11.2.0\
				server\jdbc\lib\ojdbc6.jar
			- eclipse에서 해당 lib을 실행식 인식할 수 있게
				설정..	
		- oracle db서버 설치
			서버 정보
			host(ip) : localhost(서버를 현재 같은 컴퓨터에서 호출시)
			port : 1521 
			database : xe - 데이터베이스 서버단위 식별자
			username : scott
			password : tiger
			
	2) java 코드 처리 단계(ps. 휴대폰에 타인과 대화를 생각)
		아래단계는 위단계를 처리한 기반으로 하위 내용을 처리한다.
		- jdbc 메모리 로딩하기 - 기지국(핸드폰 사용을 위한)
			ex) 기지국(jdbc)과 핸드폰사용(java.sql.*)
			ex) 로봇(jdbc)과 로봇제어장치(java.sql.*)
			Class.forName() : ClassNotFoundException
		- 예외 처리(연결객체 예외처리 - SQLException)
		- 연결자원(객체) 설정 - 전화번호를 입력해서 연결 - 서버정보를 입력
			                해서 특정 서버에 연결
			   네트워트망의 ip ==> 특정 컴퓨터 ==> 그중에서
			   오라클 서비스 지원 port ==> 여러개의 DB 중에
			   선택된 DB(sid-XE) ==> 인증(계정/비번)
		- 대화객체 설정 - 말을 하기도 하고, 전달 받기도 하고(SQL)
			insert, update, delete ==> 서버에 전달만
		- 대화의 결과를 가져오는 객체 설정
			select ==> 명령/데이터 전달 ==> 답을 가져오기도 한다.
			Resultset(행열된 2차원 데이터)
		- 대화객체의 내용을 VO객체에 할당 및 리턴
			ResultSet ==> VO
			VO로 전환해야지 객체안에 기능에 따라 다양한 처리를 효율적으로
			하지 때문이다.
		- 자원해제
			생성된 역순위로 자원해제 close() 	
		- 기타예외 처리.
			try{
				DB 처리
				자원해제
			}catch(SQLException){
				예외 처리
				
			}catch(Exception){
				기타 예외
			}finally(){
				남아 있는 자원이 있으면
				다시 해제 처리
			}
			==> 공통 자원해제 관련 클래스 만들기..
	3) 자바에서 DB 접속을 위한 핵심 내장 객체
		- java.sql.* ==> import java.sql.*;
		- Connection : 연결객체
		- Statement : 대화객체
			PreparedStatement : 준비된 대화 객체
			- 보안(SQLInjection)과 속도..
		- ResultSet : 서버에서 온 데이터를 저장	
		
		# 모든 객체 메모리 할당관계는 순차별로 처리한다.
		jdbc(클래스) =(Class.forName())
		=> 메모리 객체로 생성(DriverManager)
		==> Connection 객체 생성 ==> Statement 객체 ==> ResultSet
# sql을 통해서 실제 데이터 가져오기
1. 전체데이터 로딩해서 출력
   while()	
	1) 데이터 로딩 출력	
2. select 문 사용의 편의성에 의해서 처리된 데이터 VO객체에 담기(조건문 매개변수 활용)
	0) 매개변수에 의해 조건문으로 데이터 처리하기
	# 리턴값에 대한 처리.
	1) 한개의 데이터로 담기
		특정한 결과가 1개의 유형의 데이터 일때
		ex) 사원번호 7780의 급여
		ex) 사원번호 7780의 사원명
	2) 한 개의 VO에 담기
		ex) 사원번호 7780의 전체 컬럼 내용
	3) 여러 개의 List<VO>
3. 여러가지 sql 활용 패턴
	1) select
	2) insert
	3) update
	4) delete	
	
	
# 매개변수에 의해 데이터를 조회하는 처리
1. sql 확인/전달할 데이터 식별
	SELECT * 
	FROM EMP02
	WHERE ename LIKE '%'||'B'||'%'
	;
	--  1. 입력값에 따라서 검색되는 데이터가 다른 처리.
	--  2. 매개변수 : 사원명(ename)
2. 메서드 선언 및 매개변수 처리
	매개변수 : 사원명(ename)
3. DB 조회 처리 및 수행 내용 확인


					
		
		
		
		
		
		
			